{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(timeout:*)",
      "Bash(node:*)",
      "Bash(ls:*)",
      "Bash(npx tsc:*)",
      "WebFetch(domain:open.longportapp.com)",
      "WebFetch(domain:longportapp.github.io)",
      "Bash(bun run lint:*)",
      "Bash(bun:*)",
      "Bash(curl:*)",
      "Bash(rg:*)",
      "Bash(mkdir:*)",
      "Bash(gtimeout:*)",
      "Bash(NODE_ENV=test DISABLE_AUTO_INIT=true bun test test/e2e/simple-auth.e2e.test.ts --timeout 30000)",
      "Bash(NODE_ENV=test DISABLE_AUTO_INIT=true bun test --config jest.simple.config.js test/e2e/simple-auth.e2e.test.ts)",
      "Bash(NODE_ENV=test bun test test/minimal-auth.test.ts --timeout 10000)",
      "Bash(pkill:*)",
      "Bash(mongosh:*)",
      "Bash(redis-cli:*)",
      "Bash(grep:*)",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "Bash(./node_modules/.bin/eslint --print-config test.ts)",
      "Bash(cat:*)",
      "Bash(DISABLE_AUTO_INIT=true bun test --coverage)",
      "Bash(DISABLE_AUTO_INIT=true bun test --coverage --testPathPattern=\"\\.spec\\.ts$\" --verbose)",
      "Bash(DISABLE_AUTO_INIT=true bun test --coverage --testMatch=\"**/*.spec.ts\" --passWithNoTests)",
      "Bash(DISABLE_AUTO_INIT=true bun test --coverage --testMatch=\"**/src/**/*.spec.ts\" --testPathIgnorePatterns=\"integration\" --passWithNoTests)",
      "Bash(DISABLE_AUTO_INIT=true npx jest src/**/*.spec.ts --coverage --testTimeout=30000 --verbose)",
      "Bash(DISABLE_AUTO_INIT=true npx jest --config=jest.config.js src/**/*.spec.ts --coverage --testTimeout=30000)",
      "Bash(touch:*)",
      "Bash(rm:*)",
      "Bash(od:*)",
      "Bash(mv:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(npx eslint:*)",
      "Bash(sed:*)",
      "Bash(perl:*)",
      "Bash(npx jest test:*)",
      "Bash(npx jest:*)",
      "Bash(test:*)",
      "Bash(# 检查一些重要但可能缺少测试的文件\necho \"\"=== 检查重要模块的测试覆盖情况 ===\"\"\n\necho \"\"1. 检查config文件的测试:\"\"\nfind test/jest/unit -name \"\"*config*.spec.ts\"\" | wc -l\necho \"\"   config测试文件数量: $(find test/jest/unit -name \"\"*config*.spec.ts\"\" | wc -l)\"\"\n\necho \"\"2. 检查constants文件的测试:\"\"\nfind test/jest/unit -name \"\"*constants*.spec.ts\"\" | wc -l\necho \"\"   constants测试文件数量: $(find test/jest/unit -name \"\"*constants*.spec.ts\"\" | wc -l)\"\"\n\necho \"\"3. 检查utils文件的测试:\"\"\nfind test/jest/unit -name \"\"*util*.spec.ts\"\" | wc -l\necho \"\"   utils测试文件数量: $(find test/jest/unit -name \"\"*util*.spec.ts\"\" | wc -l)\"\"\n\necho \"\"4. 检查validators文件的测试:\"\"\nfind test/jest/unit -name \"\"*validator*.spec.ts\"\" | wc -l\necho \"\"   validators测试文件数量: $(find test/jest/unit -name \"\"*validator*.spec.ts\"\" | wc -l )\"\"\n\necho \"\"5. 检查decorators文件的测试:\"\"\nfind test/jest/unit -name \"\"*decorator*.spec.ts\"\" | wc -l\necho \"\"   decorators测试文件数量: $(find test/jest/unit -name \"\"*decorator*.spec.ts\"\" | wc -l)\"\")",
      "Bash(# 查找可能缺少测试的重要源文件\necho \"\"=== 查找重要但可能缺少测试的文件 ===\"\"\n\necho \"\"1. 检查scripts模块的源文件和测试:\"\"\necho \"\"   源文件:\"\"\nfind src/scripts -name \"\"*.ts\"\" ! -name \"\"*.spec.ts\"\" | head -5\necho \"\"   测试文件:\"\"\nfind test/jest/unit/scripts -name \"\"*.spec.ts\"\" 2>/dev/null | head -5\n\necho \"\"2. 检查cache模块的源文件和测试:\"\"\necho \"\"   源文件:\"\"\nfind src/cache -name \"\"*.ts\"\" ! -name \"\"*.spec.ts\"\" | head -5\necho \"\"   测试文件:\"\"\nfind test/jest/unit/cache -name \"\"*.spec.ts\"\" 2>/dev/null | head -5\n\necho \"\"3. 检查providers模块中缺少测试的文件:\"\"\necho \"\"   longport provider源文件:\"\"\nfind src/providers/longport -name \"\"*.ts\"\" ! -name \"\"*.spec.ts\"\" | head -3\necho \"\"   longport provider测试文件:\"\"\nfind test/jest/unit/providers/longport -name \"\"*.spec.ts\"\" 2>/dev/null | head -3)",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__search_for_pattern",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__list_dir",
      "mcp__serena__find_symbol",
      "mcp__serena__think_about_collected_information",
      "mcp__serena__write_memory",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__list_dir",
      "mcp__serena__think_about_collected_information",
      "mcp__serena__find_file",
      "mcp__serena__replace_regex",
      "mcp__sequential-thinking__sequentialthinking",
      "mcp__serena__replace_symbol_body",
      "Bash(TEST_PORT=3333 npx jest test/jest/e2e/core/stream-receiver/gateway/stream-receiver.gateway.e2e.test.ts --config test/config/jest.e2e.config.js --testNamePattern=\"should handle malformed subscription messages\")",
      "mcp__serena__read_memory",
      "mcp__serena__insert_after_symbol"
    ],
    "deny": []
  }
}