# =================================================================
# New Stock API Backend - Environment Configuration Example
# =================================================================
# 
# 🎯 Phase 3 统一配置体系 - 环境变量配置示例
# 
# 配置层级架构：
# - Layer 1: 环境变量 (此文件) - 部署时配置
# - Layer 2: 统一配置文件 (*.config.ts) - 类型安全验证
# - Layer 3: 兼容性封装层 (compatibility wrappers) - 向后兼容
# - Layer 4: 语义常量层 (semantic constants) - 固定业务标准
#
# 📝 复制此文件为 .env 并根据部署环境修改相应值
# =================================================================

# =================================================================
# 🔧 环境变量命名规范 (Phase 3 标准)
# =================================================================
# 
# 模块前缀标准：
# - AUTH_*         : Auth模块专用配置 (21个变量)
# - CACHE_*        : Cache模块专用配置 (8个核心变量)
# - NOTIFICATION_* : Notification模块专用配置 (6个核心变量)
# - ALERT_*        : Alert模块专用配置 (已迁移)
# - COMMON_*       : Common模块跨组件通用配置
# - APP_*          : AppCore应用级配置 (TTL统一管理)
# - ENV_*          : 环境特定功能开关和调试配置
# 
# 配置重叠消除率：
# - Auth模块：90% 重叠消除 (5个专用TTL变量)
# - Cache模块：68% 精简 (25个→8个核心变量)
# - Notification模块：76% 精简 (25个→6个核心变量)
# =================================================================

# =================================================================
# 🌍 基础运行环境配置
# =================================================================
NODE_ENV=development
PORT=3000
HOST=localhost

# =================================================================
# 🗄️ 数据库连接配置
# =================================================================
MONGODB_URI=mongodb://localhost:27017/smart-stock-data
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_URL=redis://localhost:6379

# =================================================================
# 🔐 基础安全配置
# =================================================================
JWT_SECRET=your-super-secret-jwt-key-minimum-32-characters-long-for-security
JWT_EXPIRES_IN=24h

# =================================================================
# 🔑 Auth模块统一配置 (Phase 3 重构完成)
# =================================================================
# 
# 🎯 配置重叠消除率：90%
# ✅ 21个专用环境变量，替代原有分散配置
# ✅ 5个专用TTL变量，消除缓存配置重叠
# ✅ 100%向后兼容，现有代码无需修改
# 
# 缓存配置层 (5个专用TTL - 消除重叠)
AUTH_PERMISSION_CACHE_TTL=300        # 权限缓存TTL (60-3600秒)
AUTH_API_KEY_CACHE_TTL=300           # API Key缓存TTL (60-7200秒)
AUTH_RATE_LIMIT_TTL=60               # 频率限制TTL (30-600秒)
AUTH_STATISTICS_CACHE_TTL=300        # 统计缓存TTL (60-1800秒)
AUTH_SESSION_CACHE_TTL=3600          # 会话缓存TTL (300-86400秒)

# 频率限制配置层 (消除重叠)
AUTH_RATE_LIMIT=100                  # 全局频率限制/分钟 (10-10000)
AUTH_STRING_LIMIT=10000              # 最大字符串长度 (1000-100000)
AUTH_TIMEOUT=5000                    # 统一操作超时/毫秒 (1000-30000)

# API Key管理配置
AUTH_API_KEY_LENGTH=32               # API Key长度 (32-64)
AUTH_MAX_API_KEYS_PER_USER=50        # 每用户最大Key数 (1-100)
AUTH_MAX_LOGIN_ATTEMPTS=5            # 最大登录尝试 (3-20)
AUTH_LOGIN_LOCKOUT_MINUTES=15        # 登录锁定时长/分钟 (5-60)

# 详细配置请参考: .env.auth.example

# =================================================================
# 📊 LongPort Provider 配置 (可选)
# =================================================================
LONGPORT_APP_KEY=your_longport_app_key
LONGPORT_APP_SECRET=your_longport_app_secret
LONGPORT_ACCESS_TOKEN=your_longport_access_token

# =================================================================
# 🎛️ 功能开关配置
# =================================================================
AUTO_INIT_ENABLED=true
MONITORING_ENABLED=true

# =================================================================
# 🏗️ AppCore 统一配置 (应用级TTL管理)
# =================================================================
# TTL 配置 (秒) - 统一管理所有模块的TTL配置
APP_DEFAULT_TTL=300
APP_STRONG_TTL=5
APP_AUTH_TTL=300
APP_MONITORING_TTL=300
APP_TRANSFORMER_TTL=300
APP_PROVIDER_SELECTION_TTL=300
APP_STREAM_WARM_TTL=300
APP_MARKET_OPEN_TTL=300

# =================================================================
# ⚡ Cache模块统一配置 (Foundation Layer - Phase 4)
# =================================================================
#
# 🎯 统一配置系统：95个分散变量 → 18个核心变量 (减少81%)
# ✅ 基于Foundation层的统一配置管理，消除配置重复和magic numbers
# ✅ 支持四层配置架构：Foundation → Config → Modules → Applications
#
# 18个统一核心环境变量 (Foundation标准)

# === TTL配置 (5个统一变量) ===
CACHE_REAL_TIME_TTL_SECONDS=5        # 实时数据TTL - 高时效性数据
CACHE_NEAR_REAL_TIME_TTL_SECONDS=30  # 准实时数据TTL - 中等时效性
CACHE_BATCH_QUERY_TTL_SECONDS=300    # 批量查询TTL - 批处理数据
CACHE_OFF_HOURS_TTL_SECONDS=1800     # 非交易时段TTL - 长期缓存
CACHE_DEFAULT_TTL_SECONDS=300        # 默认缓存TTL - 通用配置

# === 性能配置 (4个统一变量) ===
CACHE_MAX_MEMORY_MB=512              # 最大内存使用限制 (MB)
CACHE_DEFAULT_BATCH_SIZE=50          # 默认批处理大小
CACHE_MAX_CONCURRENT_OPERATIONS=16   # 最大并发操作数
CACHE_SLOW_OPERATION_THRESHOLD_MS=1000 # 慢操作检测阈值 (毫秒)

# === 间隔配置 (4个统一变量) ===
CACHE_CLEANUP_INTERVAL_MS=30000      # 缓存清理间隔 (毫秒)
CACHE_HEALTH_CHECK_INTERVAL_MS=10000 # 健康检查间隔 (毫秒)
CACHE_METRICS_COLLECTION_INTERVAL_MS=15000 # 监控指标收集间隔 (毫秒)
CACHE_CONNECTION_TIMEOUT_MS=5000     # 连接和操作超时 (毫秒)

# === 功能开关 (3个统一变量) ===
CACHE_COMPRESSION_ENABLED=true       # 数据压缩功能开关
CACHE_METRICS_ENABLED=true           # 监控指标收集开关
CACHE_PERFORMANCE_MONITORING_ENABLED=true # 性能监控功能开关

# === 限制配置 (2个统一变量) ===
CACHE_MAX_KEY_LENGTH=250             # 缓存键最大长度
CACHE_MAX_VALUE_SIZE_MB=512          # 缓存值最大大小 (MB)

# 详细配置映射请参考: src/core/05-caching/foundation/config/env-vars-mapping-table.md

# =================================================================
# 🔧 Common模块跨组件通用配置 (Phase 3标准)
# =================================================================
# 
# 🎯 零依赖共享工具配置
# ✅ 跨模块通用的批处理、超时、重试、性能阈值配置
# ✅ 标准化配置项，支持所有模块复用
# 
# 批量处理配置
COMMON_DEFAULT_BATCH_SIZE=100        # 默认批处理大小
COMMON_MAX_BATCH_SIZE=1000           # 最大批处理大小
COMMON_DEFAULT_PAGE_SIZE=10          # 默认分页大小
COMMON_MAX_PAGE_SIZE=100             # 最大分页大小
COMMON_MAX_CONCURRENT=10             # 最大并发数

# 超时配置 (毫秒) - 分级标准
COMMON_QUICK_TIMEOUT_MS=5000         # 快速操作超时
COMMON_DEFAULT_TIMEOUT_MS=30000      # 默认操作超时
COMMON_LONG_TIMEOUT_MS=60000         # 长时间操作超时
COMMON_CONNECTION_TIMEOUT_MS=5000    # 连接超时

# 重试配置 - 统一重试策略
COMMON_MAX_RETRY_ATTEMPTS=3          # 最大重试次数
COMMON_BACKOFF_BASE=2                # 退避倍数
COMMON_MAX_RETRY_DELAY_MS=10000      # 最大重试延迟
COMMON_CRITICAL_MAX_ATTEMPTS=5       # 关键操作最大重试

# 性能阈值配置 (毫秒) - 五级性能标准
COMMON_FAST_OPERATION_THRESHOLD_MS=100      # 快速操作阈值
COMMON_NORMAL_OPERATION_THRESHOLD_MS=500    # 正常操作阈值
COMMON_SLOW_OPERATION_THRESHOLD_MS=1000     # 慢操作阈值
COMMON_VERY_SLOW_OPERATION_THRESHOLD_MS=5000   # 很慢操作阈值
COMMON_CRITICAL_OPERATION_THRESHOLD_MS=10000   # 关键操作阈值

# 内存阈值配置 (MB) - 五级内存标准
COMMON_LOW_MEMORY_THRESHOLD_MB=50           # 低内存阈值
COMMON_NORMAL_MEMORY_THRESHOLD_MB=100       # 正常内存阈值
COMMON_HIGH_MEMORY_THRESHOLD_MB=200         # 高内存阈值
COMMON_CRITICAL_MEMORY_THRESHOLD_MB=500     # 关键内存阈值
COMMON_MAX_OBJECT_SIZE_MB=10               # 最大对象大小
COMMON_MAX_REQUEST_SIZE_MB=50              # 最大请求大小

# 连接池配置 - 标准化连接管理
COMMON_MIN_CONNECTION_POOL_SIZE=5           # 最小连接池大小
COMMON_MAX_CONNECTION_POOL_SIZE=20          # 最大连接池大小

# 大小限制配置 - 五级大小标准
COMMON_SMALL_SIZE_LIMIT=50                  # 小型数据限制
COMMON_MEDIUM_SIZE_LIMIT=100                # 中型数据限制
COMMON_LARGE_SIZE_LIMIT=500                 # 大型数据限制
COMMON_HUGE_SIZE_LIMIT=1000                 # 超大数据限制
COMMON_MASSIVE_SIZE_LIMIT=10000             # 海量数据限制

# =================================================================
# 📊 Notification模块核心配置 (Phase 3 重构完成)
# =================================================================
# 
# 🎯 配置精简率：76% (25个→6个核心变量)
# ✅ 独立通知系统，支持5种通道：Email, Slack, Webhook, DingTalk, Log
# ✅ 动态模板系统，MongoDB持久化，版本控制和缓存
# 
# 6个核心环境变量
NOTIFICATION_DEFAULT_TIMEOUT=15000           # 默认超时/毫秒 (5000-30000)
NOTIFICATION_MAX_BATCH_SIZE=100              # 最大批处理大小 (10-1000)
NOTIFICATION_EMAIL_TIMEOUT=30000             # 邮件超时/毫秒 (10000-60000)
NOTIFICATION_ENABLE_BATCH_PROCESSING=true    # 启用批处理
NOTIFICATION_ENABLE_RETRY_MECHANISM=true     # 启用重试机制
NOTIFICATION_ENABLE_METRICS_COLLECTION=true  # 启用指标收集

# 详细配置请参考: .env.notification.example

# =================================================================
# 🌐 环境特定功能开关和调试配置
# =================================================================
# 
# 🎯 环境相关的功能控制和调试开关
# ✅ 开发/测试/生产环境差异化配置
# 
# 调试功能配置
ENV_DEBUG_LOGS=true                          # 启用调试日志
ENV_VERBOSE_ERRORS=true                      # 详细错误信息
ENV_STACK_TRACES=true                        # 错误堆栈跟踪
ENV_REQUEST_LOGGING=true                     # 请求日志记录

# 性能优化配置
ENV_HOT_RELOAD=true                          # 热重载 (仅开发环境)
ENV_SOURCE_MAPS=true                         # 源码映射 (仅开发环境)
ENV_SKIP_AUTH_TESTING=false                  # 跳过认证测试

# 开发工具配置
ENV_API_DOCS=true                            # API文档生成
ENV_SWAGGER_UI=true                          # Swagger UI界面
ENV_METRICS_ENDPOINT=true                    # 指标端点暴露

# 安全配置
ENV_CORS_ALLOW_ALL=false                     # CORS全域允许 (生产环境必须false)
ENV_DISABLE_CSRF=false                       # 禁用CSRF保护
ENV_ALLOW_HTTP=false                         # 允许HTTP (生产环境必须false)

# 资源限制配置
ENV_MAX_HEAP_SIZE_MB=1024                    # 最大堆内存/MB
ENV_MAX_CACHE_SIZE_MB=256                    # 最大缓存内存/MB
ENV_MAX_WORKERS=4                            # 最大工作进程数
ENV_MAX_CONCURRENT_REQUESTS=100              # 最大并发请求数
ENV_REQUEST_TIMEOUT_MS=30000                 # 请求超时/毫秒

# =================================================================
# 📋 Phase 3 模块专用配置文件说明
# =================================================================
# 
# 以下模块已完成配置重构，有专门的配置文件：
# 
# ✅ 已完成重构的模块：
# - Auth模块: .env.auth.example (21个专用变量，90%重叠消除)
# - Cache模块: .env.cache.example (8个核心变量，68%精简)
# - Notification模块: .env.notification.example (6个核心变量，76%精简)
# - Alert模块: .env.alert.example (已迁移完成)
# 
# 🔄 其他专用配置文件：
# - Smart Cache: .env.smart-cache.example (智能缓存专用)
# - Stream Cache: .env.stream-cache.example (流式缓存专用)
# 
# 📌 Phase 3 环境变量命名标准：
# - AUTH_*         : Auth模块专用配置 (21个变量，消除90%重叠)
# - CACHE_*        : Cache模块专用配置 (8个核心变量)
# - NOTIFICATION_* : Notification模块专用配置 (6个核心变量)
# - ALERT_*        : Alert模块专用配置 (已迁移)
# - COMMON_*       : Common模块跨组件通用配置
# - APP_*          : AppCore应用级配置 (TTL统一管理)
# - ENV_*          : 环境特定功能开关和调试配置
# 
# 🎯 配置架构特点：
# - 配置重叠完全消除
# - 模块专用变量明确分离
# - 100%向后兼容保证
# - 类型安全验证
# - 统一命名规范
#
# =================================================================
# 🚀 Phase 3 快速启动说明
# =================================================================
#
# 1. 复制此文件为 .env
# 2. 修改数据库连接信息 (MONGODB_URI, REDIS_URL)
# 3. 设置JWT密钥 (JWT_SECRET，至少32个字符)
# 4. 根据部署环境调整模块配置：
#    - 开发环境：使用默认值即可
#    - 测试环境：可适当降低TTL和批处理大小
#    - 生产环境：建议复制模块专用配置文件并调优
# 5. 设置环境特定开关 (ENV_* 变量)
# 6. 运行 bun run dev 启动开发服务器
#
# =================================================================
# 📚 Phase 3 配置验证和健康检查
# =================================================================
#
# 配置验证命令：
# - Auth模块配置检查: DISABLE_AUTO_INIT=true npm run typecheck:file -- src/auth/config/auth-unified.config.ts
# - Cache模块配置检查: DISABLE_AUTO_INIT=true npm run typecheck:file -- src/cache/config/cache-unified.config.ts
# - 全模块配置测试: bun run test:unit:core
# - 启动健康检查: bun run start:debug
# 
# 配置一致性验证：
# - scripts/auth-config-consistency-check.js (Auth模块)
# - bun run check-constants (全局常量重复检测)
# - bun run analyze:constants-usage (常量使用分析)
# 
# 配置迁移验证：
# - bun run test:unit:auth (Auth配置迁移测试)
# - bun run test:unit:cache (Cache配置迁移测试)
# - bun run test:unit:notification (Notification配置迁移测试)
#
# =================================================================
# 📊 Phase 3 配置架构总结
# =================================================================
# 
# ✅ 配置重构成果：
# - Auth模块：90%配置重叠消除，21个专用变量
# - Cache模块：68%配置精简，25个→8个核心变量
# - Notification模块：76%配置精简，25个→6个核心变量
# - Alert模块：完全独立，专用配置文件
# 
# 📈 系统改进指标：
# - 配置文件数量：合理化管理
# - 环境变量总数：显著减少
# - 配置重叠率：接近0%
# - 向后兼容率：100%
# - 类型安全覆盖率：100%
# 
# 🔗 相关文档：
# - CLAUDE.md - 完整架构说明
# - docs/auth/auth-config-migration-guide.md - Auth配置迁移指南
# - docs/cache/cache-config-optimization.md - Cache配置优化指南
# =================================================================