# =============================================================================
# SmartCache 智能缓存组件环境变量配置模板
# =============================================================================
# 
# 📋 使用说明：
# 1. 复制此文件为 .env 或合并到现有的 .env 文件中
# 2. 根据部署环境调整相应参数值
# 3. 容器化部署时可通过 ConfigMap/Secret 管理这些变量
# 
# 🎯 配置原则：
# - 开发环境：较大的并发数和较短的TTL，便于调试
# - 测试环境：中等配置，模拟生产场景
# - 生产环境：根据服务器资源和业务需求精细调优
# 
# 💡 自动调优说明：
# - maxConcurrentUpdates 会自动基于CPU核心数计算（最小2，最大16）
# - 所有数值都有合理的默认值，可根据需要覆盖
# =============================================================================

# -----------------------------------------------------------------------------
# 🔧 SmartCache 基础配置
# -----------------------------------------------------------------------------

# 最小更新间隔（毫秒）
# 控制后台更新任务的最小执行间隔，避免过于频繁的更新
# 默认: 30000 (30秒) - 沿用Query组件现网值
SMART_CACHE_MIN_UPDATE_INTERVAL=30000

# 最大并发更新数
# 控制同时执行的后台更新任务数量，基于CPU核心数自动计算
# 默认: Math.min(Math.max(2, CPU_CORES), 16)
# 建议值：
#   - 开发环境：4-8
#   - 测试环境：8-12  
#   - 生产环境：根据服务器配置调整，通常为CPU核心数
SMART_CACHE_MAX_CONCURRENT=8

# 优雅关闭超时时间（毫秒）
# OnModuleDestroy等待所有后台任务完成的最长时间
# 默认: 30000 (30秒)
SMART_CACHE_SHUTDOWN_TIMEOUT=30000

# 启用后台更新
# 全局开关，控制是否执行后台数据更新
# 默认: true
SMART_CACHE_ENABLE_BACKGROUND_UPDATE=true

# 启用数据变化检测
# 控制是否在后台更新时检测数据变化
# 默认: true  
SMART_CACHE_ENABLE_DATA_CHANGE_DETECTION=true

# 启用监控指标收集
# 控制是否采集Prometheus指标和性能监控数据
# 默认: true
SMART_CACHE_ENABLE_METRICS=true

# -----------------------------------------------------------------------------
# 💪 强时效性策略配置 (STRONG_TIMELINESS)
# 适用场景: Receiver组件，实时数据获取，要求数据新鲜度
# -----------------------------------------------------------------------------

# 缓存TTL（秒）
# 强时效性要求下的缓存存活时间
# 建议值: 30-300秒，根据数据更新频率调整
# 默认: 60 (1分钟)
CACHE_STRONG_TTL=60

# 启用后台更新
# 默认: true
CACHE_STRONG_BACKGROUND_UPDATE=true

# 更新阈值比例 (0.0-1.0)
# 当TTL剩余时间低于此比例时触发后台更新
# 例如: 0.3 表示剩余30%TTL时开始更新
# 默认: 0.3 (30%)
CACHE_STRONG_THRESHOLD=0.3

# 强制刷新间隔（秒）
# 超过此时间强制刷新缓存，无论TTL状态
# 默认: 300 (5分钟)
CACHE_STRONG_REFRESH_INTERVAL=300

# 启用数据变化检测
# 默认: true
CACHE_STRONG_DATA_CHANGE_DETECTION=true

# -----------------------------------------------------------------------------
# 🐌 弱时效性策略配置 (WEAK_TIMELINESS)  
# 适用场景: Query组件，批量查询，允许较长缓存时间
# -----------------------------------------------------------------------------

# 缓存TTL（秒）
# 弱时效性下允许较长的缓存时间
# 建议值: 300-1800秒，根据数据变化频率调整
# 默认: 300 (5分钟)
CACHE_WEAK_TTL=300

# 启用后台更新
# 默认: true
CACHE_WEAK_BACKGROUND_UPDATE=true

# 更新阈值比例 (0.0-1.0)
# 弱时效性可以设置较低的阈值，减少更新频率
# 默认: 0.2 (20%)
CACHE_WEAK_THRESHOLD=0.2

# 最小更新间隔（秒）
# 避免频繁更新，即使满足阈值条件
# 默认: 60 (1分钟)
CACHE_WEAK_MIN_UPDATE=60

# 启用数据变化检测
# 默认: true
CACHE_WEAK_DATA_CHANGE_DETECTION=true

# -----------------------------------------------------------------------------
# 📈 市场感知策略配置 (MARKET_AWARE)
# 适用场景: 股票数据，根据市场开闭状态动态调整缓存策略
# -----------------------------------------------------------------------------

# 开市时缓存TTL（秒）
# 市场开盘时，数据变化频繁，使用较短TTL
# 建议值: 10-60秒
# 默认: 30 (30秒)
CACHE_MARKET_OPEN_TTL=30

# 闭市时缓存TTL（秒）
# 市场关闭时，数据变化缓慢，可使用较长TTL
# 建议值: 1800-7200秒 (30分钟-2小时)
# 默认: 1800 (30分钟)
CACHE_MARKET_CLOSED_TTL=1800

# 启用后台更新
# 默认: true
CACHE_MARKET_BACKGROUND_UPDATE=true

# 市场状态检查间隔（秒）
# 检查市场开闭状态的频率
# 默认: 300 (5分钟)
CACHE_MARKET_CHECK_INTERVAL=300

# 开市时更新阈值比例
# 开市时更激进的更新策略
# 默认: 0.3 (30%)
CACHE_MARKET_OPEN_THRESHOLD=0.3

# 闭市时更新阈值比例
# 闭市时更保守的更新策略
# 默认: 0.1 (10%)
CACHE_MARKET_CLOSED_THRESHOLD=0.1

# 启用数据变化检测
# 默认: true
CACHE_MARKET_DATA_CHANGE_DETECTION=true

# -----------------------------------------------------------------------------
# 🧠 自适应策略配置 (ADAPTIVE)
# 适用场景: 智能调整，基于数据变化频率动态调整缓存参数
# -----------------------------------------------------------------------------

# 基础TTL（秒）
# 自适应策略的起始TTL值
# 默认: 180 (3分钟)
CACHE_ADAPTIVE_BASE_TTL=180

# 最小TTL（秒）
# 自适应调整的下限
# 默认: 30 (30秒)
CACHE_ADAPTIVE_MIN_TTL=30

# 最大TTL（秒）
# 自适应调整的上限
# 默认: 3600 (1小时)
CACHE_ADAPTIVE_MAX_TTL=3600

# 自适应调整因子 (>0)
# 控制TTL调整的幅度，值越大调整越激进
# 默认: 1.5
CACHE_ADAPTIVE_FACTOR=1.5

# 启用后台更新
# 默认: true
CACHE_ADAPTIVE_BACKGROUND_UPDATE=true

# 数据变化检测窗口时间（秒）
# 统计数据变化频率的时间窗口
# 默认: 3600 (1小时)
CACHE_ADAPTIVE_DETECTION_WINDOW=3600

# 启用数据变化检测
# 默认: true
CACHE_ADAPTIVE_DATA_CHANGE_DETECTION=true

# =============================================================================
# 🚀 部署环境推荐配置
# =============================================================================

# 开发环境配置示例：
# SMART_CACHE_MAX_CONCURRENT=4
# CACHE_STRONG_TTL=30
# CACHE_WEAK_TTL=180
# CACHE_MARKET_OPEN_TTL=15

# 测试环境配置示例：
# SMART_CACHE_MAX_CONCURRENT=8
# CACHE_STRONG_TTL=60
# CACHE_WEAK_TTL=300
# CACHE_MARKET_OPEN_TTL=30

# 生产环境配置示例（高性能服务器）：
# SMART_CACHE_MAX_CONCURRENT=16
# CACHE_STRONG_TTL=60
# CACHE_WEAK_TTL=600
# CACHE_MARKET_OPEN_TTL=30
# CACHE_MARKET_CLOSED_TTL=3600

# =============================================================================
# 📊 监控和调试建议
# =============================================================================
# 
# 1. 通过日志观察配置生效情况：
#    - 启动时会显示解析的配置参数
#    - 配置验证失败会输出详细错误信息
# 
# 2. 关键性能指标监控：
#    - 缓存命中率：>90% (SmartCache), >70% (SymbolCache)
#    - 响应时间：P95 <200ms, P99 <500ms  
#    - 错误率：<0.1%
#    - 并发任务数：不超过配置的最大值
# 
# 3. 资源使用监控：
#    - CPU使用率：<70%
#    - 内存使用率：<80%
#    - Redis连接数：合理范围内
# 
# 4. 配置调优建议：
#    - 根据业务场景调整TTL值
#    - 基于服务器性能调整并发数
#    - 监控缓存命中率，适当调整更新策略
# =============================================================================