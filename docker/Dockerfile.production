# 生产环境Docker镜像
FROM node:18-alpine AS base

# 安装系统依赖
RUN apk add --no-cache \
    libc6-compat \
    openssl \
    ca-certificates \
    && update-ca-certificates

# 安装Bun
RUN npm install -g bun

# 设置工作目录
WORKDIR /app

# 复制package文件
COPY package.json bun.lockb ./

# 安装依赖
FROM base AS deps
RUN bun install --frozen-lockfile --production

# 构建阶段
FROM base AS builder
COPY package.json bun.lockb ./
RUN bun install --frozen-lockfile

# 复制源代码
COPY . .

# 构建应用
RUN bun run build

# 生产阶段
FROM node:18-alpine AS runner

# 创建非root用户
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nestjs

# 安装运行时依赖
RUN apk add --no-cache \
    libc6-compat \
    openssl \
    ca-certificates

# 安装Bun
RUN npm install -g bun

# 设置工作目录
WORKDIR /app

# 复制构建产物和依赖
COPY --from=deps --chown=nestjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nestjs:nodejs /app/dist ./dist
COPY --from=builder --chown=nestjs:nodejs /app/package.json ./

# 设置环境变量
ENV NODE_ENV=production
ENV PORT=3000

# 创建日志目录
RUN mkdir -p /app/logs && chown nestjs:nodejs /app/logs

# 切换到非root用户
USER nestjs

# 暴露端口
EXPOSE 3000

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/api/v1/monitoring/health || exit 1

# 启动应用
CMD ["bun", "run", "start:prod"]