/**
 * Symbol Mapper Cache 环境变量键名常量
 * 采用类型安全的方式管理环境变量键名，提供编译时检查
 * 遵循 SmartCache 的环境变量配置模式
 */
export const SYMBOL_MAPPER_CACHE_ENV_VARS = Object.freeze({
  // TTL配置 (秒)
  PROVIDER_RULES_TTL_SECONDS: "SYMBOL_MAPPER_CACHE_PROVIDER_RULES_TTL_SECONDS",
  SYMBOL_MAPPING_TTL_SECONDS: "SYMBOL_MAPPER_CACHE_SYMBOL_MAPPING_TTL_SECONDS",
  BATCH_RESULT_TTL_SECONDS: "SYMBOL_MAPPER_CACHE_BATCH_RESULT_TTL_SECONDS",

  // 批次配置
  DEFAULT_BATCH_SIZE: "SYMBOL_MAPPER_CACHE_DEFAULT_BATCH_SIZE",
  LRU_SORT_BATCH_SIZE: "SYMBOL_MAPPER_CACHE_LRU_SORT_BATCH_SIZE",
  MAX_CONCURRENT_OPERATIONS: "SYMBOL_MAPPER_CACHE_MAX_CONCURRENT_OPERATIONS",

  // 连接和重试配置 (毫秒)
  MAX_RECONNECT_DELAY_MS: "SYMBOL_MAPPER_CACHE_MAX_RECONNECT_DELAY_MS",
  BASE_RETRY_DELAY_MS: "SYMBOL_MAPPER_CACHE_BASE_RETRY_DELAY_MS",
  CONNECTION_TIMEOUT_MS: "SYMBOL_MAPPER_CACHE_CONNECTION_TIMEOUT_MS",

  // 内存监控配置 (毫秒)
  MEMORY_CHECK_INTERVAL_MS: "SYMBOL_MAPPER_CACHE_MEMORY_CHECK_INTERVAL_MS",
  MEMORY_CLEANUP_INTERVAL_MS: "SYMBOL_MAPPER_CACHE_MEMORY_CLEANUP_INTERVAL_MS",

  // LRU缓存配置
  L1_CACHE_SIZE: "SYMBOL_MAPPER_CACHE_L1_SIZE",
  L2_CACHE_SIZE: "SYMBOL_MAPPER_CACHE_L2_SIZE",
  L3_CACHE_SIZE: "SYMBOL_MAPPER_CACHE_L3_SIZE",

  // 性能监控配置
  SLOW_OPERATION_THRESHOLD_MS: "SYMBOL_MAPPER_CACHE_SLOW_OP_THRESHOLD_MS",
  METRICS_COLLECTION_ENABLED: "SYMBOL_MAPPER_CACHE_METRICS_COLLECTION_ENABLED",
  PERFORMANCE_MONITORING_ENABLED: "SYMBOL_MAPPER_CACHE_PERFORMANCE_MONITORING_ENABLED",

  // 共享TTL配置（映射到basic-cache的环境变量）
  BATCH_QUERY_TTL_SECONDS: "CACHE_BATCH_QUERY_TTL_SECONDS",
  NEAR_REAL_TIME_TTL_SECONDS: "CACHE_NEAR_REAL_TIME_TTL_SECONDS",
  DEFAULT_TTL_SECONDS: "CACHE_DEFAULT_TTL_SECONDS",

  // 共享间隔配置（映射到basic-cache的环境变量）
  GRACEFUL_SHUTDOWN_TIMEOUT_MS: "CACHE_GRACEFUL_SHUTDOWN_TIMEOUT_MS",
  HEALTH_CHECK_INTERVAL_MS: "CACHE_HEALTH_CHECK_INTERVAL_MS",
  CLEANUP_INTERVAL_MS: "CACHE_CLEANUP_INTERVAL_MS",

  // 共享批次配置（映射到basic-cache的环境变量）
  SYMBOL_MAPPING_BATCH_SIZE: "CACHE_SYMBOL_MAPPING_BATCH_SIZE",
} as const);

// 类型推导：环境变量键名类型
export type SymbolMapperCacheEnvVarKey =
  (typeof SYMBOL_MAPPER_CACHE_ENV_VARS)[keyof typeof SYMBOL_MAPPER_CACHE_ENV_VARS];

// 环境变量配置项类型映射
export type SymbolMapperCacheEnvConfig = {
  readonly [K in keyof typeof SYMBOL_MAPPER_CACHE_ENV_VARS]: string;
};

// 提供类型安全的环境变量访问器
export const getEnvVar = <K extends keyof typeof SYMBOL_MAPPER_CACHE_ENV_VARS>(
  key: K,
): SymbolMapperCacheEnvVarKey => SYMBOL_MAPPER_CACHE_ENV_VARS[key];