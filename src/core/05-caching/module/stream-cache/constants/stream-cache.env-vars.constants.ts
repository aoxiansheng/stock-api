/**
 * Stream Cache 环境变量键名常量
 * 采用类型安全的方式管理环境变量键名，提供编译时检查
 * 遵循 SmartCache 的环境变量配置模式
 */
export const STREAM_CACHE_ENV_VARS = Object.freeze({
  // 基础配置
  HOT_CACHE_TTL_SECONDS: "STREAM_CACHE_HOT_TTL_SECONDS",
  WARM_CACHE_TTL_SECONDS: "STREAM_CACHE_WARM_TTL_SECONDS",
  MAX_HOT_CACHE_SIZE: "STREAM_CACHE_MAX_HOT_SIZE",
  CONNECTION_TIMEOUT_MS: "STREAM_CACHE_CONNECTION_TIMEOUT_MS",
  HEARTBEAT_INTERVAL_MS: "STREAM_CACHE_HEARTBEAT_INTERVAL_MS",

  // 流特定配置
  STREAM_BATCH_SIZE: "STREAM_CACHE_BATCH_SIZE",
  COMPRESSION_THRESHOLD_BYTES: "STREAM_CACHE_COMPRESSION_THRESHOLD_BYTES",
  COMPRESSION_ENABLED: "STREAM_CACHE_COMPRESSION_ENABLED",

  // 清理配置
  CLEANUP_INTERVAL_MS: "STREAM_CACHE_CLEANUP_INTERVAL_MS",
  MAX_CLEANUP_ITEMS: "STREAM_CACHE_MAX_CLEANUP_ITEMS",
  MEMORY_CLEANUP_THRESHOLD: "STREAM_CACHE_MEMORY_CLEANUP_THRESHOLD",

  // 性能监控配置
  SLOW_OPERATION_THRESHOLD_MS: "STREAM_CACHE_SLOW_OP_THRESHOLD_MS",
  STATS_LOG_INTERVAL_MS: "STREAM_CACHE_STATS_LOG_INTERVAL_MS",
  PERFORMANCE_MONITORING_ENABLED: "STREAM_CACHE_PERFORMANCE_MONITORING_ENABLED",
  VERBOSE_LOGGING_ENABLED: "STREAM_CACHE_VERBOSE_LOGGING_ENABLED",

  // 错误处理配置
  MAX_RETRY_ATTEMPTS: "STREAM_CACHE_MAX_RETRY_ATTEMPTS",
  RETRY_BASE_DELAY_MS: "STREAM_CACHE_RETRY_BASE_DELAY_MS",
  RETRY_DELAY_MULTIPLIER: "STREAM_CACHE_RETRY_DELAY_MULTIPLIER",
  ENABLE_FALLBACK: "STREAM_CACHE_ENABLE_FALLBACK",

  // 共享TTL配置（映射到basic-cache的环境变量）
  DEFAULT_TTL_SECONDS: "CACHE_DEFAULT_TTL_SECONDS",
  MIN_TTL_SECONDS: "CACHE_MIN_TTL_SECONDS",
  MAX_TTL_SECONDS: "CACHE_MAX_TTL_SECONDS",
} as const);

// 类型推导：环境变量键名类型
export type StreamCacheEnvVarKey =
  (typeof STREAM_CACHE_ENV_VARS)[keyof typeof STREAM_CACHE_ENV_VARS];

// 环境变量配置项类型映射
export type StreamCacheEnvConfig = {
  readonly [K in keyof typeof STREAM_CACHE_ENV_VARS]: string;
};

// 提供类型安全的环境变量访问器
export const getEnvVar = <K extends keyof typeof STREAM_CACHE_ENV_VARS>(
  key: K,
): StreamCacheEnvVarKey => STREAM_CACHE_ENV_VARS[key];