import {
  CACHE_CORE_VALUES,
  CACHE_CORE_TTL,
  CACHE_CORE_INTERVALS,
  CACHE_CORE_BATCH_SIZES
} from '../../../foundation/constants/core-values.constants';

/**
 * Smart Cache 常量定义
 * 采用描述性命名，明确单位和语义
 * 使用Common-cache的共享常量作为基础，同时保持向后兼容性
 */
export const SMART_CACHE_CONSTANTS = Object.freeze({
  // TTL相关常量 - 使用foundation常量，统一命名规范
  TTL: {
    STRONG_TIMELINESS_DEFAULT_S: CACHE_CORE_TTL.REAL_TIME_TTL_SECONDS,
    WEAK_TIMELINESS_DEFAULT_S: CACHE_CORE_TTL.BATCH_QUERY_TTL_SECONDS,
    MARKET_OPEN_DEFAULT_S: CACHE_CORE_TTL.TRADING_HOURS_TTL_SECONDS,
    MARKET_CLOSED_DEFAULT_S: CACHE_CORE_TTL.OFF_HOURS_TTL_SECONDS,
    ADAPTIVE_MAX_S: CACHE_CORE_TTL.ARCHIVE_TTL_SECONDS,
  },

  // 时间间隔常量 - 使用foundation常量，保留旧的结构名称
  INTERVALS_MS: {
    DEFAULT_MIN_UPDATE_INTERVAL_MS: CACHE_CORE_INTERVALS.CLEANUP_INTERVAL_MS,
    GRACEFUL_SHUTDOWN_TIMEOUT_MS: CACHE_CORE_INTERVALS.GRACEFUL_SHUTDOWN_TIMEOUT_MS,
    MEMORY_CHECK_INTERVAL_MS: CACHE_CORE_INTERVALS.CLEANUP_INTERVAL_MS,
    CPU_CHECK_INTERVAL_MS: 60000,
    METRICS_COLLECTION_INTERVAL_MS: CACHE_CORE_INTERVALS.METRICS_COLLECTION_INTERVAL_MS,
    HEALTH_CHECK_INTERVAL_MS: CACHE_CORE_INTERVALS.HEALTH_CHECK_INTERVAL_MS,
  },

  // 并发控制常量 - 使用foundation常量，保留旧的结构名称
  CONCURRENCY_LIMITS: {
    MIN_CONCURRENT_UPDATES_COUNT: CACHE_CORE_VALUES.MIN_CONCURRENT_OPERATIONS,
    MAX_CONCURRENT_UPDATES_COUNT: CACHE_CORE_VALUES.MAX_CONCURRENT_OPERATIONS,
    DEFAULT_BATCH_SIZE_COUNT: CACHE_CORE_BATCH_SIZES.DEFAULT_BATCH_SIZE,
    MAX_BATCH_SIZE_COUNT: CACHE_CORE_BATCH_SIZES.LARGE_BATCH_SIZE,
    MIN_BATCH_SIZE_COUNT: 5,
  },

  // 阈值常量 - 保留原有结构
  THRESHOLD_RATIOS: {
    STRONG_UPDATE_RATIO: 0.3,
    WEAK_UPDATE_RATIO: 0.2,
    MARKET_OPEN_UPDATE_RATIO: 0.3,
    MARKET_CLOSED_UPDATE_RATIO: 0.1,
    MEMORY_PRESSURE_THRESHOLD: 0.85,
    CPU_PRESSURE_THRESHOLD: 0.8,
    CACHE_HIT_RATE_TARGET: 0.9,
    ERROR_RATE_THRESHOLD: 0.01,
  },

} as const); // 使用 as const 提供更严格的类型推导

// 深度冻结所有嵌套对象以确保完全不可变性
Object.freeze(SMART_CACHE_CONSTANTS.TTL);
Object.freeze(SMART_CACHE_CONSTANTS.INTERVALS_MS);
Object.freeze(SMART_CACHE_CONSTANTS.CONCURRENCY_LIMITS);
Object.freeze(SMART_CACHE_CONSTANTS.THRESHOLD_RATIOS);

// 从常量对象推导类型，提高类型安全性
export type SmartCacheConstantsType = typeof SMART_CACHE_CONSTANTS;
export type TTLType = typeof SMART_CACHE_CONSTANTS.TTL;
export type IntervalsType = typeof SMART_CACHE_CONSTANTS.INTERVALS_MS;
export type ConcurrencyLimitsType = typeof SMART_CACHE_CONSTANTS.CONCURRENCY_LIMITS;
export type ThresholdRatiosType = typeof SMART_CACHE_CONSTANTS.THRESHOLD_RATIOS;
