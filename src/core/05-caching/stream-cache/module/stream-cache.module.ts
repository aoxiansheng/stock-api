import { Module } from '@nestjs/common';
import { ConfigModule, ConfigService } from '@nestjs/config';
import Redis from 'ioredis';
import { StreamCacheService } from '../services/stream-cache.service';
import { STREAM_CACHE_CONFIG, DEFAULT_STREAM_CACHE_CONFIG } from '../constants/stream-cache.constants';

/**
 * ÊµÅÊï∞ÊçÆÁºìÂ≠òÊ®°Âùó
 * ‰∏ìÁî®‰∫éÂÆûÊó∂ÊµÅÊï∞ÊçÆÁöÑÁºìÂ≠òÁÆ°ÁêÜ
 * 
 * Ê†∏ÂøÉÁâπÊÄßÔºö
 * - Áã¨Á´ãÁöÑRedisËøûÊé•ÁÆ°ÁêÜ
 * - ÂèåÂ±ÇÁºìÂ≠òÊû∂ÊûÑ (Hot Cache + Warm Cache)
 * - ÊµÅÊï∞ÊçÆ‰∏ìÁî®ÁöÑÂéãÁº©ÂíåÂ∫èÂàóÂåñ
 * - Êô∫ËÉΩÁºìÂ≠òÁ≠ñÁï•ÂíåTTLÁÆ°ÁêÜ
 */
@Module({
  imports: [ConfigModule],
  providers: [
    // RedisÂÆ¢Êà∑Á´ØÊèê‰æõËÄÖ - ‰∏ìÁî®‰∫éÊµÅÊï∞ÊçÆÁºìÂ≠ò
    {
      provide: 'REDIS_CLIENT',
      useFactory: (configService: ConfigService) => {
        const redisConfig = {
          host: configService.get<string>('redis.host', 'localhost'),
          port: configService.get<number>('redis.port', 6379),
          password: configService.get<string>('redis.password'),
          db: configService.get<number>('redis.stream_cache_db', 1), // ‰ΩøÁî®Áã¨Á´ãÁöÑDB
          
          // ÊµÅÊï∞ÊçÆ‰ºòÂåñÈÖçÁΩÆ
          connectTimeout: 5000,
          commandTimeout: 3000,
          lazyConnect: true,
          
          // ËøûÊé•Ê±†ÈÖçÁΩÆ - ÈíàÂØπÈ´òÈ¢ëÊµÅÊï∞ÊçÆËÆøÈóÆ‰ºòÂåñ
          maxRetriesPerRequest: 3,
          retryDelayOnFailover: 100,
          
          // ÈáçËøûÈÖçÁΩÆ
          reconnectOnError: (err) => {
            const targetError = 'READONLY';
            return err.message.includes(targetError);
          },
          
          // ÊÄßËÉΩ‰ºòÂåñ - ÊµÅÊï∞ÊçÆÁâπÊÄß
          enableReadyCheck: true,
          keepAlive: 10000,        // Êõ¥Áü≠ÁöÑ‰øùÊ¥ªÊó∂Èó¥
          enableOfflineQueue: false, // ÊµÅÊï∞ÊçÆ‰∏çÂÖÅËÆ∏Á¶ªÁ∫øÈòüÂàó
          enableAutoPipelining: true, // ÂêØÁî®Ëá™Âä®ÁÆ°ÈÅìÂåñ
          
          // ÂÜÖÂ≠ò‰ºòÂåñ
          keyPrefix: 'stream:',      // Áªü‰∏ÄÂâçÁºÄ‰æø‰∫éÁÆ°ÁêÜ
          
          // Êó•ÂøóÈÖçÁΩÆ
          showFriendlyErrorStack: process.env.NODE_ENV !== 'production',
        };

        const redis = new Redis(redisConfig);

        // ËøûÊé•‰∫ã‰ª∂ÁõëÂê¨ - ÊµÅÊï∞ÊçÆÁºìÂ≠ò‰∏ìÁî®
        redis.on('connect', () => {
          console.log(`‚úÖ StreamCache Redis connected to ${redisConfig.host}:${redisConfig.port} (DB: ${redisConfig.db})`);
        });

        redis.on('error', (error) => {
          console.error('‚ùå StreamCache Redis connection error:', error.message);
        });

        redis.on('close', () => {
          console.log('üîå StreamCache Redis connection closed');
        });

        redis.on('reconnecting', (delay) => {
          console.log(`üîÑ StreamCache Redis reconnecting in ${delay}ms`);
        });

        return redis;
      },
      inject: [ConfigService],
    },

    // ÊµÅÁºìÂ≠òÈÖçÁΩÆÊèê‰æõËÄÖ
    {
      provide: 'STREAM_CACHE_CONFIG',
      useFactory: (configService: ConfigService) => {
        return {
          hotCacheTTL: configService.get<number>('stream_cache.hot_ttl_ms', DEFAULT_STREAM_CACHE_CONFIG.hotCacheTTL),
          warmCacheTTL: configService.get<number>('stream_cache.warm_ttl_seconds', DEFAULT_STREAM_CACHE_CONFIG.warmCacheTTL),
          maxHotCacheSize: configService.get<number>('stream_cache.max_hot_size', DEFAULT_STREAM_CACHE_CONFIG.maxHotCacheSize),
          cleanupInterval: configService.get<number>('stream_cache.cleanup_interval_ms', DEFAULT_STREAM_CACHE_CONFIG.cleanupInterval),
          compressionThreshold: configService.get<number>('stream_cache.compression_threshold', DEFAULT_STREAM_CACHE_CONFIG.compressionThreshold),
        };
      },
      inject: [ConfigService],
    },

    // Ê†∏ÂøÉÊµÅÁºìÂ≠òÊúçÂä°
    StreamCacheService,
  ],
  exports: [
    StreamCacheService,
    'REDIS_CLIENT',
    'STREAM_CACHE_CONFIG',
  ],
})
export class StreamCacheModule {
  constructor(
    private readonly configService: ConfigService,
  ) {
    // Ê®°ÂùóÂàùÂßãÂåñÊó•Âøó
    const redisHost = this.configService.get<string>('redis.host', 'localhost');
    const redisPort = this.configService.get<number>('redis.port', 6379);
    const redisDb = this.configService.get<number>('redis.stream_cache_db', 1);
    
    console.log(`üöÄ StreamCacheModule initialized`);
    console.log(`üì° StreamCache Redis configuration: ${redisHost}:${redisPort} (DB: ${redisDb})`);
    console.log(`‚öôÔ∏è  StreamCache config: Hot TTL=${STREAM_CACHE_CONFIG.TTL.HOT_CACHE_MS}ms, Warm TTL=${STREAM_CACHE_CONFIG.TTL.WARM_CACHE_SECONDS}s`);
  }
}

/**
 * ÂºÇÊ≠•Ê®°ÂùóÈÖçÁΩÆÔºàÁî®‰∫éÈúÄË¶ÅÂºÇÊ≠•ÂàùÂßãÂåñÁöÑÂú∫ÊôØÔºâ
 */
@Module({})
export class StreamCacheAsyncModule {
  static forRootAsync() {
    return {
      module: StreamCacheAsyncModule,
      imports: [ConfigModule],
      providers: [
        {
          provide: 'REDIS_CLIENT',
          useFactory: async (configService: ConfigService) => {
            const redisConfig = {
              host: configService.get<string>('redis.host', 'localhost'),
              port: configService.get<number>('redis.port', 6379),
              password: configService.get<string>('redis.password'),
              db: configService.get<number>('redis.stream_cache_db', 1),
              connectTimeout: 5000,
              commandTimeout: 3000,
            };

            const redis = new Redis(redisConfig);
            
            // Á≠âÂæÖËøûÊé•Âª∫Á´ã
            await redis.ping();
            console.log(`‚úÖ StreamCache Redis async connection established`);
            
            return redis;
          },
          inject: [ConfigService],
        },
        {
          provide: 'STREAM_CACHE_CONFIG',
          useValue: DEFAULT_STREAM_CACHE_CONFIG,
        },
        StreamCacheService,
      ],
      exports: [StreamCacheService, 'REDIS_CLIENT', 'STREAM_CACHE_CONFIG'],
    };
  }
}