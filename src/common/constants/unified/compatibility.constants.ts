/**
 * 兼容性常量映射
 * 提供新旧常量系统之间的兼容性支持，确保平滑迁移
 * 
 * 此文件的目的：
 * 1. 将现有常量映射到新的统一常量系统
 * 2. 提供向后兼容的导出接口
 * 3. 在迁移期间保持代码功能正常
 * 4. 为完全迁移后的清理工作提供参考
 */

import { HTTP_CONSTANTS } from './http.constants';
import { SYSTEM_CONSTANTS } from './system.constants';
import { PERFORMANCE_CONSTANTS } from './performance.constants';
import { CACHE_CONSTANTS } from './cache.constants';
import { OPERATION_CONSTANTS } from './operations.constants';

// 导入现有的错误消息常量
import {
  AUTH_ERROR_MESSAGES,
  BUSINESS_ERROR_MESSAGES,
  SYSTEM_ERROR_MESSAGES,
  HTTP_ERROR_MESSAGES,
  ERROR_MESSAGES
} from '../error-messages.constants';

/**
 * 错误消息映射 - 将现有错误消息与新的HTTP常量连接
 * 这样可以保持现有的详细错误消息，同时使用新的统一架构
 */
export const UNIFIED_ERROR_MESSAGES = Object.freeze({
  // 使用现有的详细错误消息作为基础
  ...AUTH_ERROR_MESSAGES,
  ...BUSINESS_ERROR_MESSAGES,
  ...SYSTEM_ERROR_MESSAGES,
  
  // 用新的HTTP常量覆盖通用HTTP错误消息
  ...HTTP_CONSTANTS.ERROR_MESSAGES,
  
  // 添加新的统一操作消息
  ...OPERATION_CONSTANTS.CRUD_MESSAGES,
});

/**
 * 性能常量兼容性映射
 * 将分散在各模块的性能阈值映射到统一常量
 */
export const PERFORMANCE_COMPATIBILITY = Object.freeze({
  // 来源：receiver.constants.ts, query.constants.ts, storage.constants.ts 等
  SLOW_REQUEST_MS: PERFORMANCE_CONSTANTS.RESPONSE_TIME_THRESHOLDS.SLOW_REQUEST_MS,
  SLOW_QUERY_MS: PERFORMANCE_CONSTANTS.RESPONSE_TIME_THRESHOLDS.SLOW_QUERY_MS,
  SLOW_STORAGE_MS: PERFORMANCE_CONSTANTS.RESPONSE_TIME_THRESHOLDS.SLOW_STORAGE_MS,
  SLOW_MAPPING_THRESHOLD_MS: PERFORMANCE_CONSTANTS.RESPONSE_TIME_THRESHOLDS.SLOW_MAPPING_MS,
  SLOW_TRANSFORMATION_MS: PERFORMANCE_CONSTANTS.RESPONSE_TIME_THRESHOLDS.SLOW_TRANSFORMATION_MS,
  
  // 通用超时配置
  DEFAULT_TIMEOUT_MS: PERFORMANCE_CONSTANTS.TIMEOUTS.DEFAULT_TIMEOUT_MS,
  QUICK_TIMEOUT_MS: PERFORMANCE_CONSTANTS.TIMEOUTS.QUICK_TIMEOUT_MS,
  LONG_TIMEOUT_MS: PERFORMANCE_CONSTANTS.TIMEOUTS.LONG_TIMEOUT_MS,
  DATABASE_TIMEOUT_MS: PERFORMANCE_CONSTANTS.TIMEOUTS.DATABASE_TIMEOUT_MS,
  
  // 重试配置
  MAX_RETRY_ATTEMPTS: PERFORMANCE_CONSTANTS.RETRY_SETTINGS.MAX_RETRY_ATTEMPTS,
  RETRY_DELAY_MS: PERFORMANCE_CONSTANTS.RETRY_SETTINGS.RETRY_DELAY_MS,
  
  // 批量处理限制
  MAX_BATCH_SIZE: PERFORMANCE_CONSTANTS.BATCH_LIMITS.MAX_BATCH_SIZE,
  DEFAULT_PAGE_SIZE: PERFORMANCE_CONSTANTS.BATCH_LIMITS.DEFAULT_PAGE_SIZE,
  MAX_PAGE_SIZE: PERFORMANCE_CONSTANTS.BATCH_LIMITS.MAX_PAGE_SIZE,
  
  // 内存阈值
  HIGH_MEMORY_USAGE_MB: PERFORMANCE_CONSTANTS.MEMORY_THRESHOLDS.HIGH_MEMORY_USAGE_MB,
});

/**
 * 缓存常量兼容性映射
 * 将分散的缓存配置统一到新的缓存常量
 */
export const CACHE_COMPATIBILITY = Object.freeze({
  // TTL配置映射
  DEFAULT_TTL: CACHE_CONSTANTS.TTL_SETTINGS.DEFAULT_TTL,
  DEFAULT_CACHE_TTL: CACHE_CONSTANTS.TTL_SETTINGS.DEFAULT_TTL,
  SHORT_TTL: CACHE_CONSTANTS.TTL_SETTINGS.SHORT_TTL,
  MEDIUM_TTL: CACHE_CONSTANTS.TTL_SETTINGS.MEDIUM_TTL,
  LONG_TTL: CACHE_CONSTANTS.TTL_SETTINGS.LONG_TTL,
  
  // 业务特定TTL
  REALTIME_DATA: CACHE_CONSTANTS.TTL_SETTINGS.REALTIME_DATA_TTL,
  BASIC_INFO: CACHE_CONSTANTS.TTL_SETTINGS.BASIC_INFO_TTL,
  RULE_CACHE_TTL: CACHE_CONSTANTS.TTL_SETTINGS.RULE_CACHE_TTL,
  MAPPING_CONFIG_TTL: CACHE_CONSTANTS.TTL_SETTINGS.MAPPING_CONFIG_TTL,
  STATS_TTL: CACHE_CONSTANTS.TTL_SETTINGS.STATS_TTL,
  
  // 缓存大小限制
  MAX_CACHE_SIZE: CACHE_CONSTANTS.SIZE_LIMITS.MAX_CACHE_SIZE,
  MAX_KEY_LENGTH: CACHE_CONSTANTS.SIZE_LIMITS.MAX_KEY_LENGTH,
  MAX_VALUE_SIZE_MB: CACHE_CONSTANTS.SIZE_LIMITS.MAX_VALUE_SIZE_MB,
  
  // 键前缀映射
  CACHE_KEY_PREFIX_QUERY: CACHE_CONSTANTS.KEY_PREFIXES.QUERY,
  CACHE_KEY_PREFIX_STORAGE: CACHE_CONSTANTS.KEY_PREFIXES.STORAGE,
  CACHE_KEY_PREFIX_TRANSFORM: CACHE_CONSTANTS.KEY_PREFIXES.TRANSFORM,
  CACHE_KEY_PREFIX_DATA_MAPPER: CACHE_CONSTANTS.KEY_PREFIXES.DATA_MAPPER,
  CACHE_KEY_PREFIX_SYMBOL_MAPPER: CACHE_CONSTANTS.KEY_PREFIXES.SYMBOL_MAPPER,
});

/**
 * 操作状态兼容性映射
 * 将各模块的操作状态常量统一
 */
export const STATUS_COMPATIBILITY = Object.freeze({
  // 基础状态
  SUCCESS: SYSTEM_CONSTANTS.OPERATION_STATUS.SUCCESS,
  FAILED: SYSTEM_CONSTANTS.OPERATION_STATUS.FAILED,
  PENDING: SYSTEM_CONSTANTS.OPERATION_STATUS.PENDING,
  PROCESSING: SYSTEM_CONSTANTS.OPERATION_STATUS.PROCESSING,
  CANCELLED: SYSTEM_CONSTANTS.OPERATION_STATUS.CANCELLED,
  TIMEOUT: SYSTEM_CONSTANTS.OPERATION_STATUS.TIMEOUT,
  COMPLETED: SYSTEM_CONSTANTS.OPERATION_STATUS.COMPLETED,
  
  // 活动状态
  ACTIVE: SYSTEM_CONSTANTS.OPERATION_STATUS.ACTIVE,
  INACTIVE: SYSTEM_CONSTANTS.OPERATION_STATUS.INACTIVE,
});

/**
 * 完整的兼容性常量集合
 * 提供一站式的兼容性常量访问接口
 */
export const COMPATIBILITY_CONSTANTS = Object.freeze({
  ERROR_MESSAGES: UNIFIED_ERROR_MESSAGES,
  PERFORMANCE: PERFORMANCE_COMPATIBILITY,
  CACHE: CACHE_COMPATIBILITY,
  STATUS: STATUS_COMPATIBILITY,
  
  // 直接导出统一常量以便访问
  HTTP: HTTP_CONSTANTS,
  SYSTEM: SYSTEM_CONSTANTS,
  OPERATIONS: OPERATION_CONSTANTS,
});

/**
 * 获取兼容性常量的工具函数
 */
export class CompatibilityHelper {
  /**
   * 检查旧常量键是否在新系统中有对应映射
   */
  static hasMapping(oldKey: string): boolean {
    return oldKey in UNIFIED_ERROR_MESSAGES ||
           oldKey in PERFORMANCE_COMPATIBILITY ||
           oldKey in CACHE_COMPATIBILITY ||
           oldKey in STATUS_COMPATIBILITY;
  }
  
  /**
   * 获取旧常量键对应的新常量值
   */
  static getMappedValue(oldKey: string): any {
    if (oldKey in UNIFIED_ERROR_MESSAGES) {
      return UNIFIED_ERROR_MESSAGES[oldKey];
    }
    if (oldKey in PERFORMANCE_COMPATIBILITY) {
      return PERFORMANCE_COMPATIBILITY[oldKey];
    }
    if (oldKey in CACHE_COMPATIBILITY) {
      return CACHE_COMPATIBILITY[oldKey];
    }
    if (oldKey in STATUS_COMPATIBILITY) {
      return STATUS_COMPATIBILITY[oldKey];
    }
    return undefined;
  }
  
  /**
   * 获取所有兼容性映射的统计信息
   */
  static getMappingStats() {
    return {
      errorMessages: Object.keys(UNIFIED_ERROR_MESSAGES).length,
      performance: Object.keys(PERFORMANCE_COMPATIBILITY).length,
      cache: Object.keys(CACHE_COMPATIBILITY).length,
      status: Object.keys(STATUS_COMPATIBILITY).length,
      total: Object.keys(COMPATIBILITY_CONSTANTS).length,
    };
  }
}