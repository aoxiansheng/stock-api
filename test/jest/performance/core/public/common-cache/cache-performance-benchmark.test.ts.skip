import { Test, TestingModule } from '@nestjs/testing';
import { ConfigModule } from '@nestjs/config';
import { CommonCacheService } from '@core/05-caching/common-cache/services/common-cache.service';
import { StorageService } from '@core/04-storage/storage/services/storage.service';
// import { DualWriteTestService } from '@core/05-caching/common-cache/monitoring/dual-write-test.service';
// import { CachePerformanceMonitorService } from '@core/05-caching/common-cache/monitoring/cache-performance-monitor.service';
import { CommonCacheModule } from '@core/05-caching/common-cache/module/common-cache.module';

/**
 * 缓存性能基准测试
 * 对比CommonCacheService和StorageService的性能差异
 */
describe.skip('Cache Performance Benchmark', () => {
  let module: TestingModule;
  // let dualWriteTest: DualWriteTestService;
  // let performanceMonitor: CachePerformanceMonitorService;
  let commonCache: CommonCacheService;
  let storageService: StorageService;

  beforeAll(async () => {
    module = await Test.createTestingModule({
      imports: [
        ConfigModule.forRoot({
          load: [
            () => ({
              redis: {
                host: process.env.REDIS_HOST || 'localhost',
                port: parseInt(process.env.REDIS_PORT || '6379'),
                db: parseInt(process.env.REDIS_PERFORMANCE_DB || '14'), // 性能测试专用数据库
              },
            }),
          ],
        }),
        CommonCacheModule,
      ],
      providers: [
        // DualWriteTestService,
        // CachePerformanceMonitorService,
        StorageService,
        {
          provide: 'METRICS_REGISTRY',
          useValue: {
            register: {
              getSingleMetric: jest.fn(),
              registerCounter: jest.fn().mockReturnValue({ labels: jest.fn().mockReturnValue({ inc: jest.fn() }) }),
              registerHistogram: jest.fn().mockReturnValue({ labels: jest.fn().mockReturnValue({ observe: jest.fn() }) }),
            },
          },
        },
      ],
    }).compile();

    // dualWriteTest = module.get<DualWriteTestService>(DualWriteTestService);
    // performanceMonitor = module.get<CachePerformanceMonitorService>(CachePerformanceMonitorService);
    commonCache = module.get<CommonCacheService>(CommonCacheService);
    storageService = module.get<StorageService>(StorageService);
  });

  afterAll(async () => {
    if (module) {
      await module.close();
    }
  });

  describe('Basic Operations Performance', () => {
    it('should benchmark get operations', async () => {
      const testKey = `benchmark:get:${Date.now()}`;
      const testData = { value: 'performance test data', timestamp: Date.now() };
      
      // 预设数据
      await commonCache.set(testKey, testData, 3600);
      
      // 测试CommonCacheService
      const commonCacheStartTime = Date.now();
      for (let i = 0; i < 100; i++) {
        await commonCache.get(testKey);
      }
      const commonCacheDuration = Date.now() - commonCacheStartTime;

      // 测试StorageService (模拟)
      const storageStartTime = Date.now();
      for (let i = 0; i < 100; i++) {
        try {
          await storageService.retrieveData({
            key: testKey,
            preferredType: 'CACHE' as any,
          });
        } catch {
          // 忽略可能的错误，专注于性能测试
        }
      }
      const storageDuration = Date.now() - storageStartTime;

      console.log('Get Operations Performance:');
      console.log(`CommonCache: ${commonCacheDuration}ms (${(commonCacheDuration/100).toFixed(2)}ms per op)`);
      console.log(`LegacyStorage: ${storageDuration}ms (${(storageDuration/100).toFixed(2)}ms per op)`);
      
      const performanceGain = ((storageDuration - commonCacheDuration) / storageDuration) * 100;
      console.log(`Performance gain: ${performanceGain.toFixed(2)}%`);

      // 记录性能指标
      performanceMonitor.recordCacheOperation('common-cache', 'get', 'hit', commonCacheDuration / 100);
      performanceMonitor.recordCacheOperation('legacy-storage', 'get', 'hit', storageDuration / 100);

      // 验证CommonCache应该更快或至少不差太多
      expect(commonCacheDuration).toBeLessThanOrEqual(storageDuration * 1.2); // 允许20%的误差
    }, 30000);

    it('should benchmark set operations', async () => {
      const testData = { value: 'benchmark set data', timestamp: Date.now() };
      
      // 测试CommonCacheService
      const commonCacheStartTime = Date.now();
      for (let i = 0; i < 50; i++) {
        await commonCache.set(`benchmark:set:common:${i}`, testData, 3600);
      }
      const commonCacheDuration = Date.now() - commonCacheStartTime;

      // 测试StorageService的直接Redis操作 (模拟)
      const storageStartTime = Date.now();
      for (let i = 0; i < 50; i++) {
        try {
          // 模拟StorageService的设置操作
          const key = `benchmark:set:storage:${i}`;
          await storageService['redis']?.setex(key, 3600, JSON.stringify(testData));
        } catch {
          // 忽略可能的错误
        }
      }
      const storageDuration = Date.now() - storageStartTime;

      console.log('Set Operations Performance:');
      console.log(`CommonCache: ${commonCacheDuration}ms (${(commonCacheDuration/50).toFixed(2)}ms per op)`);
      console.log(`LegacyStorage: ${storageDuration}ms (${(storageDuration/50).toFixed(2)}ms per op)`);

      const performanceGain = ((storageDuration - commonCacheDuration) / storageDuration) * 100;
      console.log(`Performance gain: ${performanceGain.toFixed(2)}%`);

      // 记录性能指标
      performanceMonitor.recordCacheOperation('common-cache', 'set', 'success', commonCacheDuration / 50);
      performanceMonitor.recordCacheOperation('legacy-storage', 'set', 'success', storageDuration / 50);

      expect(commonCacheDuration).toBeLessThanOrEqual(storageDuration * 1.5);
    }, 30000);

    it('should benchmark batch operations', async () => {
      const keys = Array.from({ length: 20 }, (_, i) => `benchmark:batch:${i}`);
      const entries = keys.map(key => ({
        key,
        data: { value: `batch data ${key}`, timestamp: Date.now() },
        ttl: 3600,
      }));

      // 测试CommonCacheService批量操作
      const commonCacheStartTime = Date.now();
      await commonCache.mset(entries);
      await commonCache.mget(keys);
      const commonCacheDuration = Date.now() - commonCacheStartTime;

      // 测试StorageService循环操作 (模拟旧方式)
      const storageStartTime = Date.now();
      try {
        // 批量设置
        for (const entry of entries) {
          await storageService['redis']?.setex(entry.key.replace('batch', 'legacy'), entry.ttl, JSON.stringify(entry.data));
        }
        
        // 批量获取
        for (const key of keys) {
          await storageService['redis']?.get(key.replace('batch', 'legacy'));
        }
      } catch {
        // 忽略可能的错误
      }
      const storageDuration = Date.now() - storageStartTime;

      console.log('Batch Operations Performance:');
      console.log(`CommonCache (mset + mget): ${commonCacheDuration}ms`);
      console.log(`LegacyStorage (loops): ${storageDuration}ms`);

      const performanceGain = ((storageDuration - commonCacheDuration) / storageDuration) * 100;
      console.log(`Performance gain: ${performanceGain.toFixed(2)}%`);

      // 记录性能指标
      performanceMonitor.recordCacheOperation('common-cache', 'mset', 'success', commonCacheDuration / 2, keys.length);
      performanceMonitor.recordCacheOperation('legacy-storage', 'set', 'success', storageDuration / 2, keys.length);

      // 批量操作应该显著提升性能
      expect(commonCacheDuration).toBeLessThanOrEqual(storageDuration * 0.8);
    }, 30000);
  });

  describe('Dual Write Performance Test', () => {
    it('should run basic dual write test scenarios', async () => {
      // 跳过测试如果Redis不可用
      try {
        await commonCache.isHealthy();
      } catch {
        console.log('Skipping dual write test - Redis not available');
        return;
      }

      const testScenarios = [
        {
          name: 'Basic Performance Test',
          description: '基础性能对比测试',
          operations: [
            { type: 'set', key: 'dual:test:1', data: { value: 'test1' }, ttl: 3600 },
            { type: 'get', key: 'dual:test:1' },
            { type: 'set', key: 'dual:test:2', data: { value: 'test2' }, ttl: 3600 },
            { type: 'get', key: 'dual:test:2' },
          ],
        },
      ];

      const results = await dualWriteTest.runDualWriteTest(testScenarios as any);

      expect(results).toBeDefined();
      expect(results.totalTests).toBe(1);
      expect(results.commonCache).toHaveLength(1);
      expect(results.legacyStorage).toHaveLength(1);

      // 记录测试结果
      console.log('Dual Write Test Results:');
      console.log(`Total tests: ${results.totalTests}`);
      console.log(`Test duration: ${results.endTime.getTime() - results.startTime.getTime()}ms`);
      
      if (results.commonCache[0] && results.legacyStorage[0]) {
        const commonAvg = results.commonCache[0].summary.avgResponseTime;
        const legacyAvg = results.legacyStorage[0].summary.avgResponseTime;
        console.log(`CommonCache avg response time: ${commonAvg.toFixed(2)}ms`);
        console.log(`LegacyStorage avg response time: ${legacyAvg.toFixed(2)}ms`);
        
        if (legacyAvg > 0) {
          const gain = ((legacyAvg - commonAvg) / legacyAvg) * 100;
          console.log(`Performance gain: ${gain.toFixed(2)}%`);
        }
      }
    }, 60000);

    it('should run stress test scenarios', async () => {
      // 跳过测试如果Redis不可用
      try {
        await commonCache.isHealthy();
      } catch {
        console.log('Skipping stress test - Redis not available');
        return;
      }

      const stressTestScenarios = [
        {
          name: 'High Volume Operations',
          description: '高并发操作测试',
          operations: [
            // 批量设置
            {
              type: 'mset',
              entries: Array.from({ length: 10 }, (_, i) => ({
                key: `stress:${i}`,
                data: { value: `stress test ${i}`, timestamp: Date.now() },
                ttl: 3600,
              })),
            },
            // 批量获取
            {
              type: 'mget',
              keys: Array.from({ length: 10 }, (_, i) => `stress:${i}`),
            },
          ],
        },
      ];

      const results = await dualWriteTest.runDualWriteTest(stressTestScenarios as any);

      expect(results).toBeDefined();
      expect(results.commonCache).toHaveLength(1);
      expect(results.legacyStorage).toHaveLength(1);

      console.log('Stress Test Results:');
      console.log(`CommonCache throughput: ${results.commonCache[0]?.summary.throughput.toFixed(2)} ops/sec`);
      console.log(`LegacyStorage throughput: ${results.legacyStorage[0]?.summary.throughput.toFixed(2)} ops/sec`);
    }, 60000);
  });

  describe('Performance Monitoring', () => {
    it('should record and retrieve performance metrics', async () => {
      // 记录一些示例指标
      performanceMonitor.recordCacheOperation('common-cache', 'get', 'hit', 5.2);
      performanceMonitor.recordCacheOperation('common-cache', 'get', 'miss', 15.8);
      performanceMonitor.recordCacheOperation('legacy-storage', 'get', 'hit', 8.1);
      performanceMonitor.recordCacheOperation('legacy-storage', 'get', 'miss', 22.3);

      // 记录弃用方法调用
      performanceMonitor.recordDeprecatedMethodCall('getWithSmartCache', 'StorageService', 'QueryService');
      performanceMonitor.recordDeprecatedMethodCall('batchGetWithSmartCache', 'StorageService', 'ReceiverService');

      // 获取性能摘要
      const summary = await performanceMonitor.getCachePerformanceSummary();

      expect(summary).toBeDefined();
      expect(summary.commonCache).toBeDefined();
      expect(summary.legacyStorage).toBeDefined();
      expect(summary.comparison).toBeDefined();

      console.log('Performance Monitoring Summary:');
      console.log('CommonCache:', summary.commonCache);
      console.log('LegacyStorage:', summary.legacyStorage);
      console.log('Comparison:', summary.comparison);
    });

    it('should track consistency checks', async () => {
      // 记录一致性检查结果
      performanceMonitor.recordConsistencyCheck('test:consistency:1', true, { value: 'test' }, { value: 'test' });
      performanceMonitor.recordConsistencyCheck('test:consistency:2', false, { value: 'test1' }, { value: 'test2' });
      performanceMonitor.recordConsistencyCheck('test:consistency:3', true, { value: 'test3' }, { value: 'test3' });

      // 验证记录成功
      // 在实际实现中，这里会检查指标存储中的数据
      expect(true).toBe(true); // 简单的验证，实际应该检查指标数据
    });
  });
});