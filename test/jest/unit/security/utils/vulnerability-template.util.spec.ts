/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * VulnerabilityTemplateUtil 单元测试
 * 测试漏洞模板工具类的所有方法
 */

import { VulnerabilityTemplateUtil } from "../../../../../src/security/utils/vulnerability-template.util";

describe("VulnerabilityTemplateUtil", () => {
  describe("createVulnerability", () => {
    it("应该成功创建默认凭据漏洞", () => {
      // Arrange
      const params = {
        usernames: "admin, root, test",
      };

      // Act
      const result = VulnerabilityTemplateUtil.createVulnerability(
        "DEFAULT_CREDENTIALS",
        params,
      );

      // Assert
      expect(result).toMatchObject({
        id: "default_credentials",
        type: "authentication",
        severity: "critical",
        title: "存在默认凭据账户",
        description: "系统中存在默认账户: admin, root, test",
        impact: "攻击者可能尝试使用默认密码登录",
        recommendation: "删除或重命名默认账户，并确保使用强密码",
        status: "detected",
      });
      expect(result.detected).toBeInstanceOf(Date);
    });

    it("应该成功创建过期API Key漏洞", () => {
      // Arrange
      const params = {
        id: "key123",
        maskedKey: "abc***xyz",
      };

      // Act
      const result = VulnerabilityTemplateUtil.createVulnerability(
        "EXPIRED_API_KEY",
        params,
      );

      // Assert
      expect(result).toMatchObject({
        id: "expired_api_key_key123",
        type: "authentication",
        severity: "high",
        title: "过期的API Key仍然活跃",
        description: "API Key abc***xyz... 已过期但仍处于活跃状态",
        impact: "过期的API Key可能被恶意使用",
        recommendation: "立即禁用所有过期的API Key",
        status: "detected",
      });
    });

    it("应该成功创建无参数的漏洞模板", () => {
      // Act
      const result = VulnerabilityTemplateUtil.createVulnerability(
        "LOCALHOST_DB_IN_PRODUCTION",
      );

      // Assert
      expect(result).toMatchObject({
        id: "localhost_db_in_production",
        type: "configuration",
        severity: "high",
        title: "生产环境使用本地数据库",
        description: "生产环境的数据库连接指向本地",
        impact: "可能导致数据丢失或服务不可用，且不具备高可用性",
        recommendation: "为生产环境配置专用的高可用数据库服务地址",
        status: "detected",
      });
    });

    it("应该在模板不存在时抛出错误", () => {
      // Act & Assert
      expect(() => {
        VulnerabilityTemplateUtil.createVulnerability(
          "NONEXISTENT_TEMPLATE" as any,
        );
      }).toThrow("漏洞模板不存在: NONEXISTENT_TEMPLATE");
    });

    it("应该处理复杂的参数替换", () => {
      // Arrange
      const params = {
        currentRounds: "8",
        recommendedRounds: "12",
      };

      // Act
      const result = VulnerabilityTemplateUtil.createVulnerability(
        "WEAK_PASSWORD_HASHING",
        params,
      );

      // Assert
      expect(result.description).toBe("Bcrypt轮数设置为 8，低于建议的 12 轮");
      expect(result.recommendation).toBe("将Bcrypt哈希轮数增加到至少 12 轮");
    });

    it("应该处理数组类型的参数", () => {
      // Arrange
      const params = {
        usernames: ["admin", "root", "test"] as any,
      };

      // Act
      const result = VulnerabilityTemplateUtil.createVulnerability(
        "DEFAULT_CREDENTIALS",
        params,
      );

      // Assert
      expect(result.description).toBe("系统中存在默认账户: admin, root, test");
    });

    it("应该生成正确的时间戳", () => {
      // Arrange
      const beforeTime = new Date();

      // Act
      const result = VulnerabilityTemplateUtil.createVulnerability(
        "DEFAULT_CREDENTIALS",
      );

      // Arrange
      const afterTime = new Date();

      // Assert
      expect(result.detected.getTime()).toBeGreaterThanOrEqual(
        beforeTime.getTime(),
      );
      expect(result.detected.getTime()).toBeLessThanOrEqual(
        afterTime.getTime(),
      );
    });
  });

  describe("便利方法测试", () => {
    describe("createDefaultCredentialsVulnerability", () => {
      it("应该创建默认凭据漏洞", () => {
        // Arrange
        const usernames = ["admin", "root"];

        // Act
        const result =
          VulnerabilityTemplateUtil.createDefaultCredentialsVulnerability(
            usernames,
          );

        // Assert
        expect(result.type).toBe("authentication");
        expect(result.severity).toBe("critical");
        expect(result.description).toBe("系统中存在默认账户: admin, root");
      });

      it("应该处理空用户名数组", () => {
        // Act
        const result =
          VulnerabilityTemplateUtil.createDefaultCredentialsVulnerability([]);

        // Assert
        expect(result.description).toBe("系统中存在默认账户: ");
      });
    });

    describe("createExpiredApiKeyVulnerability", () => {
      it("应该创建过期API Key漏洞", () => {
        // Arrange
        const apiKeyId = "key123";
        const maskedKey = "abc***xyz";

        // Act
        const result =
          VulnerabilityTemplateUtil.createExpiredApiKeyVulnerability(
            apiKeyId,
            maskedKey,
          );

        // Assert
        expect(result.id).toBe("expired_api_key_key123");
        expect(result.type).toBe("authentication");
        expect(result.description).toContain(maskedKey);
      });
    });

    describe("createExcessivePermissionsVulnerability", () => {
      it("应该创建权限过多漏洞", () => {
        // Arrange
        const apiKeyId = "key456";
        const maskedKey = "def***uvw";

        // Act
        const result =
          VulnerabilityTemplateUtil.createExcessivePermissionsVulnerability(
            apiKeyId,
            maskedKey,
          );

        // Assert
        expect(result.id).toBe("excessive_permissions_key456");
        expect(result.type).toBe("authorization");
        expect(result.severity).toBe("medium");
        expect(result.description).toContain(maskedKey);
      });
    });

    describe("createInsufficientRateLimitingVulnerability", () => {
      it("应该创建频率限制不足漏洞", () => {
        // Arrange
        const count = 5;

        // Act
        const result =
          VulnerabilityTemplateUtil.createInsufficientRateLimitingVulnerability(
            count,
          );

        // Assert
        expect(result.type).toBe("configuration");
        expect(result.severity).toBe("medium");
        expect(result.description).toBe("发现 5 个API Key没有适当的频率限制");
      });
    });

    describe("createWeakJwtSecretVulnerability", () => {
      it("应该创建JWT密钥强度不足漏洞", () => {
        // Arrange
        const minLength = 32;

        // Act
        const result =
          VulnerabilityTemplateUtil.createWeakJwtSecretVulnerability(minLength);

        // Assert
        expect(result.type).toBe("configuration");
        expect(result.severity).toBe("critical");
        expect(result.description).toContain("32");
        expect(result.recommendation).toContain("32");
      });
    });

    describe("createLocalhostDbInProductionVulnerability", () => {
      it("应该创建生产环境本地数据库漏洞", () => {
        // Act
        const result =
          VulnerabilityTemplateUtil.createLocalhostDbInProductionVulnerability();

        // Assert
        expect(result.type).toBe("configuration");
        expect(result.severity).toBe("high");
        expect(result.title).toBe("生产环境使用本地数据库");
      });
    });

    describe("createWeakPasswordHashingVulnerability", () => {
      it("应该创建密码哈希强度不足漏洞", () => {
        // Arrange
        const currentRounds = 8;
        const recommendedRounds = 12;

        // Act
        const result =
          VulnerabilityTemplateUtil.createWeakPasswordHashingVulnerability(
            currentRounds,
            recommendedRounds,
          );

        // Assert
        expect(result.type).toBe("encryption");
        expect(result.severity).toBe("high");
        expect(result.description).toContain("8");
        expect(result.description).toContain("12");
      });
    });
  });

  describe("replaceTemplate", () => {
    it("应该替换单个占位符", () => {
      // Arrange
      const template = "Hello {name}!";
      const params = { name: "World" };

      // Act
      const result = (VulnerabilityTemplateUtil as any).replaceTemplate(
        template,
        params,
      );

      // Assert
      expect(result).toBe("Hello World!");
    });

    it("应该替换多个占位符", () => {
      // Arrange
      const template = "User {username} with ID {id} has {count} items";
      const params = { username: "john", id: "123", count: "5" };

      // Act
      const result = (VulnerabilityTemplateUtil as any).replaceTemplate(
        template,
        params,
      );

      // Assert
      expect(result).toBe("User john with ID 123 has 5 items");
    });

    it("应该替换重复的占位符", () => {
      // Arrange
      const template = "{name} is {name}, {name} is awesome!";
      const params = { name: "John" };

      // Act
      const result = (VulnerabilityTemplateUtil as any).replaceTemplate(
        template,
        params,
      );

      // Assert
      expect(result).toBe("John is John, John is awesome!");
    });

    it("应该处理数组参数", () => {
      // Arrange
      const template = "Users: {users}";
      const params = { users: ["Alice", "Bob", "Charlie"] };

      // Act
      const result = (VulnerabilityTemplateUtil as any).replaceTemplate(
        template,
        params,
      );

      // Assert
      expect(result).toBe("Users: Alice, Bob, Charlie");
    });

    it("应该处理空参数对象", () => {
      // Arrange
      const template = "No placeholders here";
      const params = {};

      // Act
      const result = (VulnerabilityTemplateUtil as any).replaceTemplate(
        template,
        params,
      );

      // Assert
      expect(result).toBe("No placeholders here");
    });

    it("应该处理不匹配的占位符", () => {
      // Arrange
      const template = "Hello {name}, you have {count} messages";
      const params = { name: "John" }; // 缺少count参数

      // Act
      const result = (VulnerabilityTemplateUtil as any).replaceTemplate(
        template,
        params,
      );

      // Assert
      expect(result).toBe("Hello John, you have {count} messages");
    });
  });

  describe("validateTemplateParams", () => {
    it("应该验证有效的模板参数", () => {
      // Arrange
      const params = { usernames: "admin, root" };

      // Act
      const result = VulnerabilityTemplateUtil.validateTemplateParams(
        "DEFAULT_CREDENTIALS",
        params,
      );

      // Assert
      expect(result).toBe(true);
    });

    it("应该拒绝缺少必需参数的情况", () => {
      // Arrange
      const params = { maskedKey: "abc***xyz" }; // 缺少id参数

      // Act
      const result = VulnerabilityTemplateUtil.validateTemplateParams(
        "EXPIRED_API_KEY",
        params,
      );

      // Assert
      expect(result).toBe(false);
    });

    it("应该对不存在的模板返回false", () => {
      // Act
      const result = VulnerabilityTemplateUtil.validateTemplateParams(
        "NONEXISTENT_TEMPLATE" as any,
        {},
      );

      // Assert
      expect(result).toBe(false);
    });

    it("应该对没有占位符的模板返回true", () => {
      // Act
      const result = VulnerabilityTemplateUtil.validateTemplateParams(
        "LOCALHOST_DB_IN_PRODUCTION",
        {},
      );

      // Assert
      expect(result).toBe(true);
    });

    it("应该验证复杂的模板参数", () => {
      // Arrange
      const validParams = { currentRounds: "8", recommendedRounds: "12" };
      const invalidParams = { currentRounds: "8" }; // 缺少recommendedRounds

      // Act
      const validResult = VulnerabilityTemplateUtil.validateTemplateParams(
        "WEAK_PASSWORD_HASHING",
        validParams,
      );
      const invalidResult = VulnerabilityTemplateUtil.validateTemplateParams(
        "WEAK_PASSWORD_HASHING",
        invalidParams,
      );

      // Assert
      expect(validResult).toBe(true);
      expect(invalidResult).toBe(false);
    });
  });

  describe("getTemplatePlaceholders", () => {
    it("应该提取模板中的占位符", () => {
      // Act
      const result = VulnerabilityTemplateUtil.getTemplatePlaceholders(
        "DEFAULT_CREDENTIALS",
      );

      // Assert
      expect(result).toEqual(["usernames"]);
    });

    it("应该提取多个占位符", () => {
      // Act
      const result =
        VulnerabilityTemplateUtil.getTemplatePlaceholders("EXPIRED_API_KEY");

      // Assert
      expect(result).toEqual(expect.arrayContaining(["id", "maskedKey"]));
      expect(result.length).toBe(2);
    });

    it("应该对没有占位符的模板返回空数组", () => {
      // Act
      const result = VulnerabilityTemplateUtil.getTemplatePlaceholders(
        "LOCALHOST_DB_IN_PRODUCTION",
      );

      // Assert
      expect(result).toEqual([]);
    });

    it("应该对不存在的模板返回空数组", () => {
      // Act
      const result = VulnerabilityTemplateUtil.getTemplatePlaceholders(
        "NONEXISTENT_TEMPLATE" as any,
      );

      // Assert
      expect(result).toEqual([]);
    });

    it("应该去重相同的占位符", () => {
      // Act
      const result =
        VulnerabilityTemplateUtil.getTemplatePlaceholders("WEAK_JWT_SECRET");

      // Assert
      // 检查是否有重复的占位符被去重
      const unique = [...new Set(result)];
      expect(result.length).toBe(unique.length);
    });
  });

  describe("getAvailableTemplates", () => {
    it("应该返回所有可用的模板键名", () => {
      // Act
      const result = VulnerabilityTemplateUtil.getAvailableTemplates();

      // Assert
      const expectedTemplates = Object.keys(SECURITY_VULNERABILITY_TEMPLATES);
      expect(result).toEqual(expectedTemplates);
      expect(result.length).toBeGreaterThan(0);
      expect(result).toContain("DEFAULT_CREDENTIALS");
      expect(result).toContain("EXPIRED_API_KEY");
      expect(result).toContain("LOCALHOST_DB_IN_PRODUCTION");
    });
  });

  describe("hasTemplate", () => {
    it("应该检测到存在的模板", () => {
      // Act & Assert
      expect(VulnerabilityTemplateUtil.hasTemplate("DEFAULT_CREDENTIALS")).toBe(
        true,
      );
      expect(VulnerabilityTemplateUtil.hasTemplate("EXPIRED_API_KEY")).toBe(
        true,
      );
      expect(
        VulnerabilityTemplateUtil.hasTemplate("LOCALHOST_DB_IN_PRODUCTION"),
      ).toBe(true);
    });

    it("应该检测到不存在的模板", () => {
      // Act & Assert
      expect(
        VulnerabilityTemplateUtil.hasTemplate("NONEXISTENT_TEMPLATE"),
      ).toBe(false);
      expect(VulnerabilityTemplateUtil.hasTemplate("")).toBe(false);
      expect(
        VulnerabilityTemplateUtil.hasTemplate("invalid_template_name"),
      ).toBe(false);
    });

    it("应该对特殊字符模板名正确判断", () => {
      // Act & Assert
      expect(VulnerabilityTemplateUtil.hasTemplate("TEST_TEMPLATE_123")).toBe(
        false,
      );
      expect(
        VulnerabilityTemplateUtil.hasTemplate("WEAK_PASSWORD_HASHING"),
      ).toBe(true);
    });
  });

  describe("边界情况和错误处理", () => {
    it("应该处理空字符串参数", () => {
      // Arrange
      const params = { usernames: "" };

      // Act
      const result = VulnerabilityTemplateUtil.createVulnerability(
        "DEFAULT_CREDENTIALS",
        params,
      );

      // Assert
      expect(result.description).toBe("系统中存在默认账户: ");
    });

    it("应该处理数字参数", () => {
      // Arrange
      const params = { count: 0 };

      // Act
      const result = VulnerabilityTemplateUtil.createVulnerability(
        "INSUFFICIENT_RATE_LIMITING",
        params,
      );

      // Assert
      expect(result.description).toBe("发现 0 个API Key没有适当的频率限制");
    });

    it("应该处理特殊字符参数", () => {
      // Arrange
      const params = { usernames: "admin@#$%^&*()" };

      // Act
      const result = VulnerabilityTemplateUtil.createVulnerability(
        "DEFAULT_CREDENTIALS",
        params,
      );

      // Assert
      expect(result.description).toBe("系统中存在默认账户: admin@#$%^&*()");
    });
  });
});
