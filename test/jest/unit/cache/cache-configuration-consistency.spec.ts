/**
 * CacheÈÖçÁΩÆ‰∏ÄËá¥ÊÄßÊµãËØï
 * üéØ È™åËØÅCacheÊ®°ÂùóÂêàËßÑÂºÄÂèëËÆ°Âàí‰∏≠ÁöÑÈÖçÁΩÆÊï¥ÂêàÊïàÊûú
 * ‚úÖ ÊµãËØïÁªü‰∏ÄÈÖçÁΩÆÁ≥ªÁªüÁöÑ‰∏ÄËá¥ÊÄßÂíåÂÖºÂÆπÊÄß
 * 
 * ÊµãËØïË¶ÜÁõñÔºö
 * - ÈÖçÁΩÆÈáçÂè†Ê∂àÈô§È™åËØÅ
 * - ÂõõÂ±ÇÈÖçÁΩÆ‰ΩìÁ≥ªÂêàËßÑÊÄßÈ™åËØÅ
 * - ÁéØÂ¢ÉÂèòÈáèÊò†Â∞Ñ‰∏ÄËá¥ÊÄßÈ™åËØÅ
 * - ÂêëÂêéÂÖºÂÆπÊÄßÈ™åËØÅ
 * - ÈÖçÁΩÆÊñá‰ª∂Á≤æÁÆÄÈ™åËØÅ
 * 
 * @version 3.0.0
 * @created 2025-01-16
 * @author Cache Team
 */

import { Test, TestingModule } from '@nestjs/testing';
import { ConfigModule, ConfigService } from '@nestjs/config';

// ÂØºÂÖ•Áªü‰∏ÄÈÖçÁΩÆÂíåÂÖºÂÆπÊÄßÊ®°Âùó
import cacheUnifiedConfig, { CacheUnifiedConfig } from '@cache/config/cache-unified.config';
import { CacheModule } from '@cache/module/cache.module';
import { CacheService } from '@cache/services/cache.service';
import { CACHE_CORE_CONSTANTS } from '@cache/constants/cache-core.constants';

// ÂØºÂÖ•ÂÖºÂÆπÊÄßÈÖçÁΩÆ
import { CONFIGURATION_MIGRATION_MAP, ENVIRONMENT_VARIABLE_MAPPING } from '@cache/config/compatibility-registry';

describe('Cache Configuration Consistency', () => {
  let module: TestingModule;
  let configService: ConfigService;
  let cacheService: CacheService;
  let unifiedConfig: CacheUnifiedConfig;

  beforeAll(async () => {
    // ËÆæÁΩÆÊµãËØïÁéØÂ¢ÉÂèòÈáè
    process.env.CACHE_DEFAULT_TTL = '300';
    process.env.CACHE_STRONG_TTL = '5';
    process.env.CACHE_REALTIME_TTL = '30';
    process.env.CACHE_MONITORING_TTL = '300';
    process.env.CACHE_AUTH_TTL = '300';
    process.env.CACHE_MAX_BATCH_SIZE = '100';
    process.env.CACHE_MAX_SIZE = '10000';
    process.env.SMART_CACHE_MAX_BATCH = '50';

    module = await Test.createTestingModule({
      imports: [
        ConfigModule.forRoot({
          load: [cacheUnifiedConfig],
          isGlobal: true,
        }),
        CacheModule,
      ],
    }).compile();

    configService = module.get<ConfigService>(ConfigService);
    cacheService = module.get<CacheService>(CacheService);
    unifiedConfig = configService.get<CacheUnifiedConfig>('cacheUnified');
  });

  afterAll(async () => {
    await module.close();
    // Ê∏ÖÁêÜÊµãËØïÁéØÂ¢ÉÂèòÈáè
    delete process.env.CACHE_DEFAULT_TTL;
    delete process.env.CACHE_STRONG_TTL;
    delete process.env.CACHE_REALTIME_TTL;
    delete process.env.CACHE_MONITORING_TTL;
    delete process.env.CACHE_AUTH_TTL;
    delete process.env.CACHE_MAX_BATCH_SIZE;
    delete process.env.CACHE_MAX_SIZE;
    delete process.env.SMART_CACHE_MAX_BATCH;
  });

  describe('ÈÖçÁΩÆÈáçÂè†Ê∂àÈô§È™åËØÅ', () => {
    it('Â∫îËØ•Ê∂àÈô§TTLÈÖçÁΩÆÈáçÂè†', () => {
      // È™åËØÅÁªü‰∏ÄÈÖçÁΩÆÂåÖÂê´ÊâÄÊúâTTLÈÖçÁΩÆ
      expect(unifiedConfig.defaultTtl).toBe(300);
      expect(unifiedConfig.strongTimelinessTtl).toBe(5);
      expect(unifiedConfig.realtimeTtl).toBe(30);
      expect(unifiedConfig.monitoringTtl).toBe(300);
      expect(unifiedConfig.authTtl).toBe(300);
      expect(unifiedConfig.transformerTtl).toBe(300);
      expect(unifiedConfig.suggestionTtl).toBe(300);
      expect(unifiedConfig.longTermTtl).toBe(3600);
    });

    it('Â∫îËØ•Ê∂àÈô§ÈôêÂà∂ÈÖçÁΩÆÈáçÂè†', () => {
      // È™åËØÅÁªü‰∏ÄÈÖçÁΩÆÂåÖÂê´ÊâÄÊúâÈôêÂà∂ÈÖçÁΩÆ
      expect(unifiedConfig.maxBatchSize).toBe(100);
      expect(unifiedConfig.maxCacheSize).toBe(10000);
      expect(unifiedConfig.lruSortBatchSize).toBe(1000);
      expect(unifiedConfig.smartCacheMaxBatch).toBe(50);
      expect(unifiedConfig.maxCacheSizeMB).toBe(1024);
    });

    it('Â∫îËØ•Ê∂àÈô§ÊÄßËÉΩÈÖçÁΩÆÈáçÂè†', () => {
      // È™åËØÅÁªü‰∏ÄÈÖçÁΩÆÂåÖÂê´ÊâÄÊúâÊÄßËÉΩÈÖçÁΩÆ
      expect(unifiedConfig.compressionThreshold).toBe(1024);
      expect(unifiedConfig.compressionEnabled).toBe(true);
      expect(unifiedConfig.maxItems).toBe(10000);
      expect(unifiedConfig.maxKeyLength).toBe(255);
      expect(unifiedConfig.maxValueSizeMB).toBe(10);
      expect(unifiedConfig.slowOperationMs).toBe(100);
      expect(unifiedConfig.retryDelayMs).toBe(100);
      expect(unifiedConfig.lockTtl).toBe(30);
    });
  });

  describe('ÂõõÂ±ÇÈÖçÁΩÆ‰ΩìÁ≥ªÂêàËßÑÊÄßÈ™åËØÅ', () => {
    it('Layer 1: ÁéØÂ¢ÉÂèòÈáèÂ±ÇÂ∫îËØ•Ê≠£Á°ÆÊò†Â∞Ñ', () => {
      // È™åËØÅÁéØÂ¢ÉÂèòÈáèÂà∞ÈÖçÁΩÆÁöÑÊò†Â∞Ñ
      const envVarMappings = Object.keys(ENVIRONMENT_VARIABLE_MAPPING);
      
      // È™åËØÅÂÖ≥ÈîÆÁéØÂ¢ÉÂèòÈáèÈÉΩÊúâÊò†Â∞Ñ
      expect(envVarMappings).toContain('CACHE_DEFAULT_TTL');
      expect(envVarMappings).toContain('CACHE_STRONG_TTL');
      expect(envVarMappings).toContain('CACHE_MAX_BATCH_SIZE');
      expect(envVarMappings).toContain('CACHE_MAX_SIZE');
      expect(envVarMappings).toContain('SMART_CACHE_MAX_BATCH');
    });

    it('Layer 2: Áªü‰∏ÄÈÖçÁΩÆÂ±ÇÂ∫îËØ•Êèê‰æõÁ±ªÂûãÂÆâÂÖ®', () => {
      // È™åËØÅÈÖçÁΩÆÂØπË±°Á±ªÂûã
      expect(typeof unifiedConfig.defaultTtl).toBe('number');
      expect(typeof unifiedConfig.strongTimelinessTtl).toBe('number');
      expect(typeof unifiedConfig.compressionEnabled).toBe('boolean');
      expect(typeof unifiedConfig.maxBatchSize).toBe('number');
      
      // È™åËØÅÈÖçÁΩÆÂÄºËåÉÂõ¥
      expect(unifiedConfig.defaultTtl).toBeGreaterThan(0);
      expect(unifiedConfig.strongTimelinessTtl).toBeLessThanOrEqual(60);
      expect(unifiedConfig.maxBatchSize).toBeGreaterThan(0);
      expect(unifiedConfig.maxBatchSize).toBeLessThanOrEqual(1000);
    });

    it('Layer 3: ÂÖºÂÆπÂåÖË£ÖÂ±ÇÂ∫îËØ•Ê≠£Â∏∏Â∑•‰Ωú', () => {
      // È™åËØÅCacheServiceÂèØ‰ª•ËÆøÈóÆÈÖçÁΩÆ
      expect(cacheService).toBeDefined();
      
      // È™åËØÅÂÖºÂÆπÊÄßÂåÖË£ÖÂô®Êèê‰æõÁöÑÈÖçÁΩÆ
      const ttlConfig = configService.get('CACHE_TTL_CONFIG');
      const limitsConfig = configService.get('CACHE_LIMITS_CONFIG');
      
      expect(ttlConfig).toBeDefined();
      expect(limitsConfig).toBeDefined();
    });

    it('Layer 4: ËØ≠‰πâÂ∏∏ÈáèÂ±ÇÂ∫îËØ•Êèê‰æõÂõ∫ÂÆöÊ†áÂáÜ', () => {
      // È™åËØÅÊ†∏ÂøÉÂ∏∏ÈáèÂÆö‰πâ
      expect(CACHE_CORE_CONSTANTS.TYPE_SEMANTICS).toBeDefined();
      expect(CACHE_CORE_CONSTANTS.KEY_PREFIX_SEMANTICS).toBeDefined();
      expect(CACHE_CORE_CONSTANTS.OPERATION_SEMANTICS).toBeDefined();
      expect(CACHE_CORE_CONSTANTS.STATUS_SEMANTICS).toBeDefined();
      expect(CACHE_CORE_CONSTANTS.QUALITY_STANDARDS).toBeDefined();
      expect(CACHE_CORE_CONSTANTS.BUSINESS_RULES).toBeDefined();
      
      // È™åËØÅÂ∏∏ÈáèÁöÑ‰∏çÂèòÊÄß
      expect(() => {
        (CACHE_CORE_CONSTANTS.TYPE_SEMANTICS as any).TEST = 'test';
      }).toThrow();
    });
  });

  describe('ÁéØÂ¢ÉÂèòÈáèÊò†Â∞Ñ‰∏ÄËá¥ÊÄßÈ™åËØÅ', () => {
    it('Â∫îËØ•Êúâ8‰∏™Ê†∏ÂøÉÁéØÂ¢ÉÂèòÈáè', () => {
      // È™åËØÅÊ†∏ÂøÉÁéØÂ¢ÉÂèòÈáèÊï∞Èáè‰ªé15‰∏™Á≤æÁÆÄÂà∞8‰∏™
      const coreEnvVars = [
        'CACHE_DEFAULT_TTL',
        'CACHE_STRONG_TTL', 
        'CACHE_REALTIME_TTL',
        'CACHE_AUTH_TTL',
        'CACHE_MAX_BATCH_SIZE',
        'CACHE_MAX_SIZE',
        'SMART_CACHE_MAX_BATCH',
        'CACHE_COMPRESSION_ENABLED'
      ];
      
      expect(coreEnvVars).toHaveLength(8);
      
      // È™åËØÅÊØè‰∏™Ê†∏ÂøÉÂèòÈáèÈÉΩÂú®Êò†Â∞Ñ‰∏≠
      coreEnvVars.forEach(envVar => {
        expect(ENVIRONMENT_VARIABLE_MAPPING[envVar]).toBeDefined();
      });
    });

    it('Â∫îËØ•Ê≠£Á°ÆÊò†Â∞ÑÁéØÂ¢ÉÂèòÈáèÂà∞ÈÖçÁΩÆ', () => {
      // È™åËØÅÁéØÂ¢ÉÂèòÈáèÂÄºÊ≠£Á°ÆÊò†Â∞ÑÂà∞Áªü‰∏ÄÈÖçÁΩÆ
      expect(unifiedConfig.defaultTtl).toBe(parseInt(process.env.CACHE_DEFAULT_TTL));
      expect(unifiedConfig.strongTimelinessTtl).toBe(parseInt(process.env.CACHE_STRONG_TTL));
      expect(unifiedConfig.realtimeTtl).toBe(parseInt(process.env.CACHE_REALTIME_TTL));
      expect(unifiedConfig.authTtl).toBe(parseInt(process.env.CACHE_AUTH_TTL));
      expect(unifiedConfig.maxBatchSize).toBe(parseInt(process.env.CACHE_MAX_BATCH_SIZE));
      expect(unifiedConfig.maxCacheSize).toBe(parseInt(process.env.CACHE_MAX_SIZE));
      expect(unifiedConfig.smartCacheMaxBatch).toBe(parseInt(process.env.SMART_CACHE_MAX_BATCH));
    });

    it('Â∫îËØ•Êèê‰æõÂêàÁêÜÁöÑÈªòËÆ§ÂÄº', () => {
      // ÂàõÂª∫Ê≤°ÊúâÁéØÂ¢ÉÂèòÈáèÁöÑÈÖçÁΩÆÂÆû‰æã
      const originalEnv = process.env;
      process.env = {};
      
      try {
        // ÈáçÊñ∞Âä†ËΩΩÈÖçÁΩÆ‰ª•ÊµãËØïÈªòËÆ§ÂÄº
        const defaultConfig = cacheUnifiedConfig();
        
        expect(defaultConfig.defaultTtl).toBe(300);
        expect(defaultConfig.strongTimelinessTtl).toBe(5);
        expect(defaultConfig.realtimeTtl).toBe(30);
        expect(defaultConfig.maxBatchSize).toBe(100);
        expect(defaultConfig.maxCacheSize).toBe(10000);
        expect(defaultConfig.compressionEnabled).toBe(true);
      } finally {
        process.env = originalEnv;
      }
    });
  });

  describe('ÂêëÂêéÂÖºÂÆπÊÄßÈ™åËØÅ', () => {
    it('Â∫îËØ•ÊîØÊåÅÁé∞ÊúâÁöÑÈÖçÁΩÆËÆøÈóÆÊñπÂºè', () => {
      // È™åËØÅÈÄöËøáConfigServiceÂèØ‰ª•ËÆøÈóÆÂÖºÂÆπÊÄßÈÖçÁΩÆ
      const legacyTtlConfig = configService.get('CACHE_TTL_CONFIG');
      const legacyLimitsConfig = configService.get('CACHE_LIMITS_CONFIG');
      
      expect(legacyTtlConfig).toBeDefined();
      expect(legacyTtlConfig.defaultTtl).toBe(unifiedConfig.defaultTtl);
      expect(legacyTtlConfig.authTtl).toBe(unifiedConfig.authTtl);
      
      expect(legacyLimitsConfig).toBeDefined();
      expect(legacyLimitsConfig.maxBatchSize).toBe(unifiedConfig.maxBatchSize);
      expect(legacyLimitsConfig.maxCacheSize).toBe(unifiedConfig.maxCacheSize);
    });

    it('Â∫îËØ•Áª¥Êä§ÈÖçÁΩÆËøÅÁßªÊò†Â∞Ñ', () => {
      // È™åËØÅÈÖçÁΩÆËøÅÁßªÊò†Â∞ÑÂ≠òÂú®‰∏îÊ≠£Á°Æ
      expect(CONFIGURATION_MIGRATION_MAP.cacheUnified).toBeDefined();
      expect(CONFIGURATION_MIGRATION_MAP.cacheUnified.status).toBe('active');
      expect(CONFIGURATION_MIGRATION_MAP.cacheUnified.replaces).toContain('cache');
      expect(CONFIGURATION_MIGRATION_MAP.cacheUnified.replaces).toContain('cacheLimits');
      expect(CONFIGURATION_MIGRATION_MAP.cacheUnified.replaces).toContain('unifiedTtl');
      
      // È™åËØÅÂ∫üÂºÉÈÖçÁΩÆÊ†áËÆ∞
      expect(CONFIGURATION_MIGRATION_MAP.cache.status).toBe('deprecated');
      expect(CONFIGURATION_MIGRATION_MAP.cache.removal).toBe('v3.0.0');
    });
  });

  describe('ÈÖçÁΩÆÊñá‰ª∂Á≤æÁÆÄÈ™åËØÅ', () => {
    it('Â∫îËØ•Âè™Êúâ4‰∏™Ê†∏ÂøÉÈÖçÁΩÆÊñá‰ª∂', () => {
      // È™åËØÅÈÖçÁΩÆÊñá‰ª∂Êï∞Èáè‰ªé8‰∏™ÂáèÂ∞ëÂà∞4‰∏™
      const expectedConfigFiles = [
        'cache-unified.config.ts',     // ‰∏ªË¶ÅÁªü‰∏ÄÈÖçÁΩÆ
        'cache-legacy.config.ts',      // ÂÖºÂÆπÊÄßÈÖçÁΩÆ
        'cache-config-compatibility.ts', // ÂÖºÂÆπÊÄßÂåÖË£ÖÂô®
        'ttl-compatibility-wrapper.ts'   // TTLÂÖºÂÆπÊÄßÂåÖË£ÖÂô®
      ];
      
      expect(expectedConfigFiles).toHaveLength(4);
      
      // È™åËØÅÈÖçÁΩÆËøÅÁßªÊò†Â∞ÑÂèçÊò†‰∫ÜÊñá‰ª∂Á≤æÁÆÄ
      const activeMigrations = Object.values(CONFIGURATION_MIGRATION_MAP)
        .filter(config => config.status === 'active');
      expect(activeMigrations).toHaveLength(1); // Âè™ÊúâcacheUnifiedÊòØactiveÁä∂ÊÄÅ
    });

    it('Â∫îËØ•ÁßªÈô§ÂÜó‰ΩôÈÖçÁΩÆÊñá‰ª∂', () => {
      // È™åËØÅÂ∑≤ÁßªÈô§ÁöÑÈÖçÁΩÆÂú®ËøÅÁßªÊò†Â∞Ñ‰∏≠Ê†áËÆ∞‰∏∫deprecated
      const deprecatedConfigs = ['cache', 'cacheLimits', 'unifiedTtl'];
      
      deprecatedConfigs.forEach(configName => {
        expect(CONFIGURATION_MIGRATION_MAP[configName].status).toBe('deprecated');
        expect(CONFIGURATION_MIGRATION_MAP[configName].removal).toBe('v3.0.0');
      });
    });
  });

  describe('ÈÖçÁΩÆÈ™åËØÅÂíåÈîôËØØÂ§ÑÁêÜ', () => {
    it('Â∫îËØ•È™åËØÅÈÖçÁΩÆÂÄºËåÉÂõ¥', () => {
      // ÊµãËØïÈÖçÁΩÆÈ™åËØÅÂô®
      expect(() => {
        const invalidConfig = {
          defaultTtl: -1, // Êó†ÊïàÂÄº
          strongTimelinessTtl: 5,
          maxBatchSize: 100,
        };
        cacheUnifiedConfig.apply(null, [invalidConfig]);
      }).toThrow();
    });

    it('Â∫îËØ•Âú®ÈÖçÁΩÆÈîôËØØÊó∂Êèê‰æõÊúâÊÑè‰πâÁöÑÈîôËØØ‰ø°ÊÅØ', () => {
      try {
        const invalidConfig = {
          defaultTtl: 'invalid', // Á±ªÂûãÈîôËØØ
          strongTimelinessTtl: 5,
        };
        cacheUnifiedConfig.apply(null, [invalidConfig]);
      } catch (error) {
        expect(error.message).toContain('validation failed');
      }
    });
  });

  describe('ÊÄßËÉΩÂíåÂÜÖÂ≠ò‰ΩøÁî®È™åËØÅ', () => {
    it('Â∫îËØ•Âø´ÈÄüËÆøÈóÆÈÖçÁΩÆ', () => {
      // ÊµãËØïÈÖçÁΩÆËÆøÈóÆÊÄßËÉΩ
      const startTime = Date.now();
      
      for (let i = 0; i < 1000; i++) {
        const config = configService.get<CacheUnifiedConfig>('cacheUnified');
        expect(config.defaultTtl).toBeDefined();
      }
      
      const endTime = Date.now();
      const duration = endTime - startTime;
      
      // 1000Ê¨°ÈÖçÁΩÆËÆøÈóÆÂ∫îËØ•Âú®100msÂÜÖÂÆåÊàê
      expect(duration).toBeLessThan(100);
    });

    it('Â∫îËØ•ÈÅøÂÖçÈÖçÁΩÆÂØπË±°ÈáçÂ§çÂàõÂª∫', () => {
      // È™åËØÅÈÖçÁΩÆÂØπË±°ÂºïÁî®‰∏ÄËá¥ÊÄß
      const config1 = configService.get<CacheUnifiedConfig>('cacheUnified');
      const config2 = configService.get<CacheUnifiedConfig>('cacheUnified');
      
      // ConfigServiceÂ∫îËØ•ÁºìÂ≠òÈÖçÁΩÆÂØπË±°
      expect(config1).toBe(config2);
    });
  });

  describe('‰∏öÂä°ËßÑÂàô‰∏ÄËá¥ÊÄßÈ™åËØÅ', () => {
    it('Â∫îËØ•ÈÅµÂæ™ÁºìÂ≠òË¥®ÈáèÊ†áÂáÜ', () => {
      const qualityStandards = CACHE_CORE_CONSTANTS.QUALITY_STANDARDS;
      
      // È™åËØÅÂëΩ‰∏≠ÁéáÊ†áÂáÜ
      expect(qualityStandards.HIT_RATE.EXCELLENT).toBe(0.95);
      expect(qualityStandards.HIT_RATE.GOOD).toBe(0.85);
      expect(qualityStandards.HIT_RATE.ACCEPTABLE).toBe(0.70);
      
      // È™åËØÅÂìçÂ∫îÊó∂Èó¥Ê†áÂáÜ
      expect(qualityStandards.RESPONSE_TIME.EXCELLENT).toBe(10);
      expect(qualityStandards.RESPONSE_TIME.GOOD).toBe(50);
      expect(qualityStandards.RESPONSE_TIME.ACCEPTABLE).toBe(100);
    });

    it('Â∫îËØ•ÈÅµÂæ™‰∏öÂä°ËßÑÂàô', () => {
      const businessRules = CACHE_CORE_CONSTANTS.BUSINESS_RULES;
      
      // È™åËØÅ‰∏ÄËá¥ÊÄßËßÑÂàô
      expect(businessRules.CONSISTENCY.STRONG_CONSISTENCY_TYPES).toContain('stock_quote');
      expect(businessRules.CONSISTENCY.STRONG_CONSISTENCY_TYPES).toContain('real_time');
      expect(businessRules.CONSISTENCY.STRONG_CONSISTENCY_TYPES).toContain('auth');
      
      // È™åËØÅ‰ºòÂÖàÁ∫ßËßÑÂàô
      expect(businessRules.PRIORITY.CRITICAL).toContain('stock_quote');
      expect(businessRules.PRIORITY.CRITICAL).toContain('auth');
    });
  });
});