import { AUTH_ERROR_CODES, AuthErrorCode } from '@auth/constants/auth-error-codes.constants';

describe('Auth Error Codes Constants', () => {
  describe('AUTH_ERROR_CODES', () => {
    it('应该正确定义所有错误码常量', () => {
      // Assert
      expect(AUTH_ERROR_CODES).toBeDefined();
      
      // Validation Errors (001-299)
      expect(AUTH_ERROR_CODES.INVALID_API_KEY_FORMAT).toBe('AUTH_VALIDATION_001');
      expect(AUTH_ERROR_CODES.INVALID_CREDENTIALS).toBe('AUTH_VALIDATION_002');
      expect(AUTH_ERROR_CODES.INVALID_TOKEN_FORMAT).toBe('AUTH_VALIDATION_003');
      expect(AUTH_ERROR_CODES.INVALID_USER_ROLE).toBe('AUTH_VALIDATION_004');
      expect(AUTH_ERROR_CODES.INVALID_PERMISSION_FORMAT).toBe('AUTH_VALIDATION_005');
      expect(AUTH_ERROR_CODES.MISSING_REQUIRED_PARAMETERS).toBe('AUTH_VALIDATION_006');
      expect(AUTH_ERROR_CODES.INVALID_PASSWORD_FORMAT).toBe('AUTH_VALIDATION_007');
      expect(AUTH_ERROR_CODES.INVALID_EMAIL_FORMAT).toBe('AUTH_VALIDATION_008');
      expect(AUTH_ERROR_CODES.RATE_LIMIT_EXCEEDED).toBe('AUTH_VALIDATION_010');
      
      // Business Logic Errors (300-599)
      expect(AUTH_ERROR_CODES.API_KEY_NOT_FOUND).toBe('AUTH_BUSINESS_300');
      expect(AUTH_ERROR_CODES.API_KEY_EXPIRED).toBe('AUTH_BUSINESS_301');
      expect(AUTH_ERROR_CODES.API_KEY_REVOKED).toBe('AUTH_BUSINESS_302');
      expect(AUTH_ERROR_CODES.USER_NOT_FOUND).toBe('AUTH_BUSINESS_303');
      expect(AUTH_ERROR_CODES.USER_ACCOUNT_DISABLED).toBe('AUTH_BUSINESS_304');
      expect(AUTH_ERROR_CODES.INSUFFICIENT_PERMISSIONS).toBe('AUTH_BUSINESS_305');
      expect(AUTH_ERROR_CODES.SESSION_EXPIRED).toBe('AUTH_BUSINESS_306');
      expect(AUTH_ERROR_CODES.TOKEN_EXPIRED).toBe('AUTH_BUSINESS_307');
      expect(AUTH_ERROR_CODES.TOKEN_INVALID).toBe('AUTH_BUSINESS_308');
      expect(AUTH_ERROR_CODES.MAX_API_KEYS_EXCEEDED).toBe('AUTH_BUSINESS_309');
      expect(AUTH_ERROR_CODES.AUTHENTICATION_FAILED).toBe('AUTH_BUSINESS_310');
      expect(AUTH_ERROR_CODES.AUTHORIZATION_FAILED).toBe('AUTH_BUSINESS_311');
      expect(AUTH_ERROR_CODES.ACCOUNT_LOCKED).toBe('AUTH_BUSINESS_312');
      expect(AUTH_ERROR_CODES.PASSWORD_POLICY_VIOLATION).toBe('AUTH_BUSINESS_313');
      expect(AUTH_ERROR_CODES.DUPLICATE_API_KEY_NAME).toBe('AUTH_BUSINESS_314');
      
      // System Resource Errors (600-899)
      expect(AUTH_ERROR_CODES.CACHE_SERVICE_UNAVAILABLE).toBe('AUTH_SYSTEM_600');
      expect(AUTH_ERROR_CODES.CONFIGURATION_ERROR).toBe('AUTH_SYSTEM_601');
      expect(AUTH_ERROR_CODES.SERVICE_INITIALIZATION_FAILED).toBe('AUTH_SYSTEM_602');
      expect(AUTH_ERROR_CODES.RATE_LIMIT_SERVICE_ERROR).toBe('AUTH_SYSTEM_603');
      expect(AUTH_ERROR_CODES.TOKEN_GENERATION_FAILED).toBe('AUTH_SYSTEM_700');
      expect(AUTH_ERROR_CODES.ENCRYPTION_FAILED).toBe('AUTH_SYSTEM_701');
      expect(AUTH_ERROR_CODES.PERFORMANCE_DEGRADATION).toBe('AUTH_SYSTEM_702');
      
      // External Dependency Errors (900-999)
      expect(AUTH_ERROR_CODES.DATABASE_CONNECTION_FAILED).toBe('AUTH_EXTERNAL_900');
      expect(AUTH_ERROR_CODES.DATABASE_QUERY_FAILED).toBe('AUTH_EXTERNAL_901');
      expect(AUTH_ERROR_CODES.USER_REPOSITORY_ERROR).toBe('AUTH_EXTERNAL_902');
      expect(AUTH_ERROR_CODES.API_KEY_REPOSITORY_ERROR).toBe('AUTH_EXTERNAL_903');
      expect(AUTH_ERROR_CODES.EXTERNAL_AUTH_SERVICE_ERROR).toBe('AUTH_EXTERNAL_950');
      expect(AUTH_ERROR_CODES.EXTERNAL_PERMISSION_SERVICE_ERROR).toBe('AUTH_EXTERNAL_951');
    });

    it('应该确保错误码格式正确', () => {
      // Arrange
      const validationErrors = [
        AUTH_ERROR_CODES.INVALID_API_KEY_FORMAT,
        AUTH_ERROR_CODES.INVALID_CREDENTIALS,
        AUTH_ERROR_CODES.INVALID_TOKEN_FORMAT,
        AUTH_ERROR_CODES.INVALID_USER_ROLE,
        AUTH_ERROR_CODES.INVALID_PERMISSION_FORMAT,
        AUTH_ERROR_CODES.MISSING_REQUIRED_PARAMETERS,
        AUTH_ERROR_CODES.INVALID_PASSWORD_FORMAT,
        AUTH_ERROR_CODES.INVALID_EMAIL_FORMAT,
        AUTH_ERROR_CODES.RATE_LIMIT_EXCEEDED,
      ];
      
      const businessErrors = [
        AUTH_ERROR_CODES.API_KEY_NOT_FOUND,
        AUTH_ERROR_CODES.API_KEY_EXPIRED,
        AUTH_ERROR_CODES.API_KEY_REVOKED,
        AUTH_ERROR_CODES.USER_NOT_FOUND,
        AUTH_ERROR_CODES.USER_ACCOUNT_DISABLED,
        AUTH_ERROR_CODES.INSUFFICIENT_PERMISSIONS,
        AUTH_ERROR_CODES.SESSION_EXPIRED,
        AUTH_ERROR_CODES.TOKEN_EXPIRED,
        AUTH_ERROR_CODES.TOKEN_INVALID,
        AUTH_ERROR_CODES.MAX_API_KEYS_EXCEEDED,
        AUTH_ERROR_CODES.AUTHENTICATION_FAILED,
        AUTH_ERROR_CODES.AUTHORIZATION_FAILED,
        AUTH_ERROR_CODES.ACCOUNT_LOCKED,
        AUTH_ERROR_CODES.PASSWORD_POLICY_VIOLATION,
        AUTH_ERROR_CODES.DUPLICATE_API_KEY_NAME,
      ];
      
      const systemErrors = [
        AUTH_ERROR_CODES.CACHE_SERVICE_UNAVAILABLE,
        AUTH_ERROR_CODES.CONFIGURATION_ERROR,
        AUTH_ERROR_CODES.SERVICE_INITIALIZATION_FAILED,
        AUTH_ERROR_CODES.RATE_LIMIT_SERVICE_ERROR,
        AUTH_ERROR_CODES.TOKEN_GENERATION_FAILED,
        AUTH_ERROR_CODES.ENCRYPTION_FAILED,
        AUTH_ERROR_CODES.PERFORMANCE_DEGRADATION,
      ];
      
      const externalErrors = [
        AUTH_ERROR_CODES.DATABASE_CONNECTION_FAILED,
        AUTH_ERROR_CODES.DATABASE_QUERY_FAILED,
        AUTH_ERROR_CODES.USER_REPOSITORY_ERROR,
        AUTH_ERROR_CODES.API_KEY_REPOSITORY_ERROR,
        AUTH_ERROR_CODES.EXTERNAL_AUTH_SERVICE_ERROR,
        AUTH_ERROR_CODES.EXTERNAL_PERMISSION_SERVICE_ERROR,
      ];

      // Act & Assert
      validationErrors.forEach(code => {
        expect(code).toMatch(/^AUTH_VALIDATION_\d{3}$/);
      });
      
      businessErrors.forEach(code => {
        expect(code).toMatch(/^AUTH_BUSINESS_\d{3}$/);
      });
      
      systemErrors.forEach(code => {
        expect(code).toMatch(/^AUTH_SYSTEM_\d{3}$/);
      });
      
      externalErrors.forEach(code => {
        expect(code).toMatch(/^AUTH_EXTERNAL_\d{3}$/);
      });
    });
  });

  describe('AuthErrorCode', () => {
    it('应该正确定义AuthErrorCode类型', () => {
      // Arrange
      const errorCode: AuthErrorCode = 'AUTH_VALIDATION_001';

      // Assert
      expect(errorCode).toBe(AUTH_ERROR_CODES.INVALID_API_KEY_FORMAT);
    });
  });
});